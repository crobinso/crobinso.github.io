<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cole's dev log - virt</title><link href="https://crobinso.github.io/" rel="alternate"></link><link href="https://crobinso.github.io/feeds/virt.atom.xml" rel="self"></link><id>https://crobinso.github.io/</id><updated>2019-04-09T14:01:00-04:00</updated><entry><title>Host 'Network Interfaces' panel removed from virt-manager</title><link href="https://crobinso.github.io/2019/04/host-network-interfaces-panel-removed.html" rel="alternate"></link><published>2019-04-09T14:01:00-04:00</published><updated>2019-04-09T14:01:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2019-04-09:/2019/04/host-network-interfaces-panel-removed.html</id><summary type="html">&lt;p&gt;I released &lt;a href="https://www.redhat.com/archives/virt-tools-list/2018-October/msg00087.html"&gt;virt-manager 2.0.0&lt;/a&gt; in October 2018. Since the release contained the full port to python3, it seemed like a good opportunity to drop some baggage from the app.&lt;/p&gt;
&lt;p&gt;The biggest piece we removed was the UI for managing host network interfaces. This is the Connection Details-&gt;Network …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I released &lt;a href="https://www.redhat.com/archives/virt-tools-list/2018-October/msg00087.html"&gt;virt-manager 2.0.0&lt;/a&gt; in October 2018. Since the release contained the full port to python3, it seemed like a good opportunity to drop some baggage from the app.&lt;/p&gt;
&lt;p&gt;The biggest piece we removed was the UI for managing host network interfaces. This is the Connection Details-&gt;Network Interfaces panel, and the 'New Interface' wizard for defining host network definitions for things like bridges, bonds, and vlan devices. The main screen of the old UI looked like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://2.bp.blogspot.com/-z9wAKvWEkck/XKvexfuWBqI/AAAAAAAAC5w/4j3bap-0-7cQxeMQ9bhQl5a-969EK4kpACLcBGAs/s1600/Screenshot%2Bfrom%2B2019-04-08%2B19-47-21.png"&gt;&lt;img alt="" height="280" src="https://2.bp.blogspot.com/-z9wAKvWEkck/XKvexfuWBqI/AAAAAAAAC5w/4j3bap-0-7cQxeMQ9bhQl5a-969EK4kpACLcBGAs/s400/Screenshot%2Bfrom%2B2019-04-08%2B19-47-21.png" width="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Behind the scenes, this UI was using libvirt's Interface APIs, which also power the 'virsh iface-*' commands. These APIs are little more than a wrapper around the &lt;a href="https://pagure.io/netcf"&gt;netcf&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;netcf aimed to be a linux distro independent API for network device configuration. On Red Hat distros this meant turning the API's XML format into an /etc/sysconfig/network script. There were even pie-in-the-sky ideas about NetworkManager one day using netcf.&lt;/p&gt;
&lt;p&gt;In practice though the library never really took off. It was years before a debian backend showed up, contributed by a Red Hatter in the hope of increasing library uptake, though it didn't seem to help. netcf basically only existed to serve the libvirt Interface APIs, yet those APIs were never really used by any major libvirt consuming app, besides virt-manager. And in virt-manager's case it was largely just slapping some UI over the XML format and lifecycle operations.&lt;/p&gt;
&lt;p&gt;For virt-manager's usecases we hoped that netcf would make it trivial to bridge the host's network interface, which when used with VMs would give them first class IP addresses on the host network setup, not NAT like the 'default' virtual network. Unfortunately though the UI would create the ifcfg files well enough, behind the scenes nothing played well with NetworkManager for years and years. The standard suggestion for was to disable NetworkManager if you wanted to bridge your host NIC. Not very user friendly. Some people did manage to use the UI to that effect but it was never a trivial process.&lt;/p&gt;
&lt;p&gt;Nowadays NetworkManager can handle bridging natively and is much more powerful than what virt-manager/libvirt/netcf provide. The virt-manager UI was more likely to shoot you in the foot than make things simple. And it had become increasingly clear that virt-manager was not the place to maintain host network config UI.&lt;/p&gt;
&lt;p&gt;So we made the decision to drop all this from virt-manager in 2.0.0. netcf and the libvirt interface APIs still exist. If you're interested in some more history on the interface API/netcf difficulties, check out &lt;a href="https://www.redhat.com/archives/virt-tools-list/2018-October/msg00049.html"&gt;Laine's email&lt;/a&gt; to virt-tools-list.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Setting custom network names on Fedora</title><link href="https://crobinso.github.io/2018/10/setting-custom-network-names-on-fedora.html" rel="alternate"></link><published>2018-10-04T21:27:00-04:00</published><updated>2018-10-04T21:27:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2018-10-04:/2018/10/setting-custom-network-names-on-fedora.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/"&gt;systemd predictable network names&lt;/a&gt; give us host interface names like &lt;strong&gt;enp3s0&lt;/strong&gt;. On one of my hosts, I have two interfaces: one that is my regular hard wired connection, and another I only plug in occasionally for some virt network testing. I can never remember the systemd names, so I want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/"&gt;systemd predictable network names&lt;/a&gt; give us host interface names like &lt;strong&gt;enp3s0&lt;/strong&gt;. On one of my hosts, I have two interfaces: one that is my regular hard wired connection, and another I only plug in occasionally for some virt network testing. I can never remember the systemd names, so I want to rename the interfaces to something more descriptive for my needs. in my case &lt;strong&gt;lan0main&lt;/strong&gt; and &lt;strong&gt;lan1pcie&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The page referenced says to use systemd links. However after struggling with that for a while I'm that's only relevant to systemd-networkd usage and doesn't apply to Fedora's default use of NetworkManager. So I needed another way.&lt;/p&gt;
&lt;p&gt;Long story short I ended up with some custom udev rules that are patterned after the old 70-persistent-net.rules file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/udev/rules.d/99-cole-nic-names.rules
&lt;span class="go"&gt;SUBSYSTEM==&amp;quot;net&amp;quot;, ACTION==&amp;quot;add&amp;quot;, DRIVERS==&amp;quot;?*&amp;quot;, ATTR{address}==&amp;quot;70:8b:cd:80:e5:5f&amp;quot;, ATTR{type}==&amp;quot;1&amp;quot;, NAME=&amp;quot;lan0main&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;SUBSYSTEM==&amp;quot;net&amp;quot;, ACTION==&amp;quot;add&amp;quot;, DRIVERS==&amp;quot;?*&amp;quot;, ATTR{address}==&amp;quot;68:05:ca:1a:f5:da&amp;quot;, ATTR{type}==&amp;quot;1&amp;quot;, NAME=&amp;quot;lan1pcie&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Easy qemu commandline passthrough with virt-xml</title><link href="https://crobinso.github.io/2017/03/easy-qemu-commandline-passthrough-with.html" rel="alternate"></link><published>2017-03-24T21:30:00-04:00</published><updated>2017-03-24T21:30:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2017-03-24:/2017/03/easy-qemu-commandline-passthrough-with.html</id><summary type="html">&lt;p&gt;Libvirt has supported &lt;a href="https://libvirt.org/drvqemu.html#qemucommand"&gt;qemu commandline option passthrough&lt;/a&gt; for qemu/kvm VMs for quite a while. The format for it is a bit of a pain though since it requires setting a magic xmlns value at the top of the domain XML. Basically doing it by hand kinda sucks.&lt;/p&gt;
&lt;p&gt;In the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Libvirt has supported &lt;a href="https://libvirt.org/drvqemu.html#qemucommand"&gt;qemu commandline option passthrough&lt;/a&gt; for qemu/kvm VMs for quite a while. The format for it is a bit of a pain though since it requires setting a magic xmlns value at the top of the domain XML. Basically doing it by hand kinda sucks.&lt;/p&gt;
&lt;p&gt;In the recently released &lt;a href="http://blog.wikichoon.com/2017/03/virt-manager-141-released.html"&gt;virt-manager 1.4.1&lt;/a&gt;, we added a virt-install/virt-xml option &lt;strong&gt;--qemu-commandline&lt;/strong&gt; that tweaks option passthrough for new or existing VMs. So for example, if you wanted to add the qemu option string '-device FOO' to an existing VM named &lt;strong&gt;f25&lt;/strong&gt;, you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./virt-xml f25 --edit --confirm --qemu-commandline=&amp;quot;-device FOO&amp;quot;

&lt;span class="gd"&gt;--- Original XML&lt;/span&gt;
&lt;span class="gi"&gt;+++ Altered XML&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1,4 +1,4 @@&lt;/span&gt;
&lt;span class="gd"&gt;-&amp;lt;domain type=&amp;quot;kvm&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+&amp;lt;domain xmlns:qemu=&amp;quot;http://libvirt.org/schemas/domain/qemu/1.0&amp;quot; type=&amp;quot;kvm&amp;quot;&amp;gt;&lt;/span&gt;
   &amp;lt;name&amp;gt;f25&amp;lt;/name&amp;gt;
   &amp;lt;uuid&amp;gt;9b6f1795-c88b-452a-a54c-f8579ddc18dd&amp;lt;/uuid&amp;gt;
   &amp;lt;memory unit=&amp;quot;KiB&amp;quot;&amp;gt;4194304&amp;lt;/memory&amp;gt;
&lt;span class="gu"&gt;@@ -104,4 +104,8 @@&lt;/span&gt;
       &amp;lt;address type=&amp;quot;pci&amp;quot; domain=&amp;quot;0x0000&amp;quot; bus=&amp;quot;0x00&amp;quot; slot=&amp;quot;0x0a&amp;quot; function=&amp;quot;0x0&amp;quot;/&amp;gt;
     &amp;lt;/rng&amp;gt;
   &amp;lt;/devices&amp;gt;
&lt;span class="gi"&gt;+  &amp;lt;qemu:commandline&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;lt;qemu:arg value=&amp;quot;-device&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;lt;qemu:arg value=&amp;quot;foo&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+  &amp;lt;/qemu:commandline&amp;gt;&lt;/span&gt;
 &amp;lt;/domain&amp;gt;

Define &amp;#39;f25&amp;#39; with the changed XML? (y/n):
&lt;/pre&gt;&lt;/div&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager 1.4.1 released!</title><link href="https://crobinso.github.io/2017/03/virt-manager-141-released.html" rel="alternate"></link><published>2017-03-08T19:15:00-05:00</published><updated>2017-03-08T19:15:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2017-03-08:/2017/03/virt-manager-141-released.html</id><summary type="html">&lt;p&gt;I've just released virt-manager 1.4.1. The highlights are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;storage/nodedev event API support (Jovanka Gulicoska)&lt;/li&gt;
&lt;li&gt;UI options for enabling spice GL (Marc-André Lureau)&lt;/li&gt;
&lt;li&gt;Add default virtio-rng /dev/urandom for supported guest OS&lt;/li&gt;
&lt;li&gt;Cloning and rename support for UEFI VMs (Pavel Hrdina)&lt;/li&gt;
&lt;li&gt;libguestfs inspection UI improvements (Pino Toscano)&lt;/li&gt;
&lt;li&gt;virt-install …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I've just released virt-manager 1.4.1. The highlights are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;storage/nodedev event API support (Jovanka Gulicoska)&lt;/li&gt;
&lt;li&gt;UI options for enabling spice GL (Marc-André Lureau)&lt;/li&gt;
&lt;li&gt;Add default virtio-rng /dev/urandom for supported guest OS&lt;/li&gt;
&lt;li&gt;Cloning and rename support for UEFI VMs (Pavel Hrdina)&lt;/li&gt;
&lt;li&gt;libguestfs inspection UI improvements (Pino Toscano)&lt;/li&gt;
&lt;li&gt;virt-install: Add --qemu-commandline&lt;/li&gt;
&lt;li&gt;virt-install: Add --network vhostuser (Chen Hanxiao)&lt;/li&gt;
&lt;li&gt;virt-install: Add --sysinfo (Charles Arnold)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Plus the usual slew of bug fixes and small improvements.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>UEFI virt roms now in official Fedora repos</title><link href="https://crobinso.github.io/2016/06/uefi-virt-support-now-in-official.html" rel="alternate"></link><published>2016-06-29T13:27:00-04:00</published><updated>2016-06-29T13:27:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-06-29:/2016/06/uefi-virt-support-now-in-official.html</id><summary type="html">&lt;p&gt;&lt;a href="https://kparal.wordpress.com/2016/06/27/uefi-for-qemu-now-in-fedora-repositories/"&gt;Kamil&lt;/a&gt; got to it first, but just a note that UEFI roms for x86 and aarch64 virt are now shipped in the standard Fedora repos, where previously the recommended place to grab them was an external nightly repo. Kamil has updated the &lt;a href="https://fedoraproject.org/w/index.php?title=Using_UEFI_with_QEMU"&gt;UEFI+QEMU wiki page&lt;/a&gt; to reflect this change …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://kparal.wordpress.com/2016/06/27/uefi-for-qemu-now-in-fedora-repositories/"&gt;Kamil&lt;/a&gt; got to it first, but just a note that UEFI roms for x86 and aarch64 virt are now shipped in the standard Fedora repos, where previously the recommended place to grab them was an external nightly repo. Kamil has updated the &lt;a href="https://fedoraproject.org/w/index.php?title=Using_UEFI_with_QEMU"&gt;UEFI+QEMU wiki page&lt;/a&gt; to reflect this change.&lt;/p&gt;
&lt;p&gt;On up to date Fedora 23+ these roms will be installed automatically with the relevant qemu packages, and libvirt is properly configured to advertise the rom files to applications, so &lt;a href="http://blog.wikichoon.com/2016/01/uefi-support-in-virt-install-and-virt.html"&gt;enabling this with tools like virt-manager&lt;/a&gt; is available out of the box.&lt;/p&gt;
&lt;p&gt;For the curious, the reason we can now ship these binaries in Fedora is because the problematic EDK2 'FatPkg' code, which had a &lt;a href="https://fedoraproject.org/w/index.php?title=Using_UEFI_with_QEMU&amp;amp;diff=431056&amp;amp;oldid=423634#EDK2_Licensing_Issues"&gt;Fedora incompatible license&lt;/a&gt;, was replaced with an implementation with a less restrictive (and more Fedora friendly) license.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager 1.4.0 release</title><link href="https://crobinso.github.io/2016/06/virt-manager-140-release.html" rel="alternate"></link><published>2016-06-18T11:06:00-04:00</published><updated>2016-06-18T11:06:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-06-18:/2016/06/virt-manager-140-release.html</id><summary type="html">&lt;p&gt;I've just released virt-manager 1.4.0. Besides the &lt;a href="http://blog.wikichoon.com/2016/05/spice-openglvirgl-acceleration-on.html"&gt;spice GL bits that I previously talked about&lt;/a&gt;, nothing too much exciting in this release except a lot of virt-install/virt-xml command line extensions.&lt;/p&gt;
&lt;p&gt;The changelog highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;virt-manager: spice GL console support (Marc-André Lureau, Cole Robinson)&lt;/li&gt;
&lt;li&gt;Bump gtk and pygobject deps …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I've just released virt-manager 1.4.0. Besides the &lt;a href="http://blog.wikichoon.com/2016/05/spice-openglvirgl-acceleration-on.html"&gt;spice GL bits that I previously talked about&lt;/a&gt;, nothing too much exciting in this release except a lot of virt-install/virt-xml command line extensions.&lt;/p&gt;
&lt;p&gt;The changelog highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;virt-manager: spice GL console support (Marc-André Lureau, Cole Robinson)&lt;/li&gt;
&lt;li&gt;Bump gtk and pygobject deps to 3.14&lt;/li&gt;
&lt;li&gt;virt-manager: add checkbox to forget keyring password (Pavel Hrdina)&lt;/li&gt;
&lt;li&gt;cli: add --graphics gl= (Marc-André Lureau)&lt;/li&gt;
&lt;li&gt;cli: add --video accel3d= (Marc-André Lureau)&lt;/li&gt;
&lt;li&gt;cli: add --graphics listen=none (Marc-André Lureau)&lt;/li&gt;
&lt;li&gt;cli: add --transient flag (Richard W.M. Jones)&lt;/li&gt;
&lt;li&gt;cli: --features gic= support, and set a default for it (Pavel Hrdina)&lt;/li&gt;
&lt;li&gt;cli: Expose --video heads, ram, vram, vgamem&lt;/li&gt;
&lt;li&gt;cli: add --graphics listen=socket&lt;/li&gt;
&lt;li&gt;cli: add device address.type/address.bus/...&lt;/li&gt;
&lt;li&gt;cli: add --disk seclabelX.model (and .label, .relabel)&lt;/li&gt;
&lt;li&gt;cli: add --cpu cellX.id (and .cpus, and .memory)&lt;/li&gt;
&lt;li&gt;cli: add --network rom_bar= and rom_file=&lt;/li&gt;
&lt;li&gt;cli: add --disk backing_format=&lt;/li&gt;
&lt;/ul&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>check-pylint: mini tool for running pylint anywhere</title><link href="https://crobinso.github.io/2016/06/check-pylint-mini-tool-for-running.html" rel="alternate"></link><published>2016-06-10T08:46:00-04:00</published><updated>2016-06-10T08:46:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-06-10:/2016/06/check-pylint-mini-tool-for-running.html</id><summary type="html">&lt;p&gt;pylint and pep8 are indispensable tools for python development IMO. For projects I maintain I've long ago added a 'setup pylint' sub-command to run both commands, and I've documented this as a necessary step in the contributor guidelines.&lt;/p&gt;
&lt;p&gt;But over the years I've accumulated many repos for small bits of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;pylint and pep8 are indispensable tools for python development IMO. For projects I maintain I've long ago added a 'setup pylint' sub-command to run both commands, and I've documented this as a necessary step in the contributor guidelines.&lt;/p&gt;
&lt;p&gt;But over the years I've accumulated many repos for small bits of python code that never have need for a setup.py script, but I still want the convenience of being able to run pylint and pep8 with a single command and a reasonable set of options.&lt;/p&gt;
&lt;p&gt;So, a while back I wrote this tiny '&lt;a href="https://github.com/crobinso/check-pylint"&gt;check-pylint&lt;/a&gt;' script which does exactly that. The main bit it adds is automatically searching the current directory for python scripts and modules and passing them to pylint/pep8. From the README:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple helper script that scoops up all python modules and scripts beneath the current directory, and passes them through pylint and pep8. Has a bit of smarts to ignore .git directory, and handle files that don't end in .py&lt;/p&gt;
&lt;p&gt;The point is that you can just fire off 'check-pylint' in any directory containing python code and get a quick report.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>spice OpenGL/virgl acceleration on Fedora 24</title><link href="https://crobinso.github.io/2016/05/spice-openglvirgl-acceleration-on.html" rel="alternate"></link><published>2016-05-22T10:56:00-04:00</published><updated>2016-05-22T10:56:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-05-22:/2016/05/spice-openglvirgl-acceleration-on.html</id><summary type="html">&lt;p&gt;New in Fedora 24 virt is 3D accelerated SPICE graphics, via &lt;a href="https://virgil3d.github.io/"&gt;Virgl&lt;/a&gt;. This is kinda-sorta OpenGL passthrough from the VM up to the host machine. Much of the initial support has been around since qemu 2.5, but it's more generally accessible now that SPICE is in the mix, since …&lt;/p&gt;</summary><content type="html">&lt;p&gt;New in Fedora 24 virt is 3D accelerated SPICE graphics, via &lt;a href="https://virgil3d.github.io/"&gt;Virgl&lt;/a&gt;. This is kinda-sorta OpenGL passthrough from the VM up to the host machine. Much of the initial support has been around since qemu 2.5, but it's more generally accessible now that SPICE is in the mix, since that's the default display type used by virt-manager and gnome-boxes.&lt;/p&gt;
&lt;p&gt;I'll explain below how you can test things on Fedora 24, but first let's cover the hurdles and caveats. This is far from being something that can be turned on by default and there's still serious integration issues to iron out. All of this is regarding usage with libvirt tools.&lt;/p&gt;
&lt;h3&gt;Caveats and known issues&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This doesn't work with qemu:///system yet, which is what &lt;a href="http://blog.wikichoon.com/2016/01/qemusystem-vs-qemusession.html"&gt;virt-manager uses by default&lt;/a&gt;. Permissions and &lt;a href="http://www.redhat.com/archives/libvir-list/2016-May/msg01435.html"&gt;cgroup access&lt;/a&gt; are problematic at the moment. qemu:///session (the gnome-boxes default) is saved from some of these issues, but it's still affected by...&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1337333"&gt;svirt/selinux issues&lt;/a&gt;. We haven't come up with a plan here yet.&lt;/li&gt;
&lt;li&gt;When enabled, your VM can't be migrated or saved (migrate to disk), either directly or as part of taking a VM snapshot&lt;/li&gt;
&lt;li&gt;This only works if connecting to a VM on your local machine. And once enabled, the VM isn't accessible remotely whatsoever&lt;/li&gt;
&lt;li&gt;virt-manager has some weird rendering behavior that requires &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1337721"&gt;resizing the window first before you see any display output&lt;/a&gt;. It's fixed upstream, but no fedora build yet. virt-viewer works fine&lt;/li&gt;
&lt;li&gt;virt-manager has some &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1337721"&gt;weird behavior if trying to run two GL enabled VMs at once&lt;/a&gt;. Patches have been posted upstream for spice-gtk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of these issues, we haven't exposed this as a UI knob in any of the tools yet, to save us some redundant bug reports for the above issues from users who are just clicking a cool sounding check box :) Instead you'll need to explicitly opt in via the command line.&lt;/p&gt;
&lt;h3&gt;Testing it out&lt;/h3&gt;
&lt;p&gt;You'll need the following packages (or later) to test this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;qemu-2.6.0-2.fc24&lt;/li&gt;
&lt;li&gt;libvirt-1.3.3.1-2.fc24&lt;/li&gt;
&lt;li&gt;virt-manager-1.3.2-4.20160520git2204de62d9.fc24&lt;/li&gt;
&lt;li&gt;At least F24 beta on the host&lt;/li&gt;
&lt;li&gt;Fedore 24 beta in the guest. Anything earlier is not going to actually enable the 3D acceleration. I have no idea about the state of other distributions. And to make it abundantly clear this is &lt;strong&gt;linux only&lt;/strong&gt; and likely will be for a long time at least, I don't know if Windows driver support is even on the radar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you install a Fedora 24 VM through the standard methods, you can enable spice GL for your VM with these two commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; virt-xml --connect &lt;span class="nv"&gt;$URI&lt;/span&gt; &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --confirm --edit --video &lt;span class="nv"&gt;clearxml&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes,model&lt;span class="o"&gt;=&lt;/span&gt;virtio,accel3d&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;span class="gp"&gt;$&lt;/span&gt; virt-xml --connect &lt;span class="nv"&gt;$URI&lt;/span&gt; &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --confirm --edit --graphics &lt;span class="nv"&gt;clearxml&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes,type&lt;span class="o"&gt;=&lt;/span&gt;spice,gl&lt;span class="o"&gt;=&lt;/span&gt;on,listen&lt;span class="o"&gt;=&lt;/span&gt;none
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first command will switch the graphics device to 'virtio' and enable the 3D acceleration setting. The second command will set up spice to listen locally only, and enable GL. Make sure to fully poweroff the VM afterwards for the settings to take effect. If you want to make the changes manually with '&lt;a href="http://wiki.libvirt.org/page/FAQ#Where_are_VM_config_files_stored.3F_How_do_I_edit_a_VM.27s_XML_config.3F"&gt;virsh edit&lt;/a&gt;', the XML specifics are described in the &lt;a href="https://cgit.freedesktop.org/spice/spice/commit/?id=782c7508e28fdeee786cdcebffd22f772d7f09ec"&gt;spice GL documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once your VM has started up, you can verify that everything is working correctly by checking &lt;code&gt;glxinfo&lt;/code&gt; output in the VM, 'virgl' should appear in the renderer string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; glxinfo &lt;span class="p"&gt;|&lt;/span&gt; grep virgl
&lt;span class="go"&gt;    Device: virgl (0x1010)&lt;/span&gt;
&lt;span class="go"&gt;OpenGL renderer string: Gallium 0.4 on virgl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And of course the more fun test of giving supertuxkart a spin :)&lt;/p&gt;
&lt;p&gt;Credit to Dave Airlie, Gerd Hoffman, and Marc-André Lureau for all the great work that got us to this point!&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Tips for querying git tags</title><link href="https://crobinso.github.io/2016/01/tips-for-querying-git-tags.html" rel="alternate"></link><published>2016-01-20T10:00:00-05:00</published><updated>2016-01-20T10:00:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-01-20:/2016/01/tips-for-querying-git-tags.html</id><summary type="html">&lt;p&gt;With package maintenance, bug triage, and email support, I often need to look at a project's git tags to know about the latest releases, when they were released, and what releases contain certain features. Here's a couple workflow tips that make my life easier.&lt;/p&gt;
&lt;h3&gt;Better git tag listing&lt;/h3&gt;
&lt;p&gt;Based on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With package maintenance, bug triage, and email support, I often need to look at a project's git tags to know about the latest releases, when they were released, and what releases contain certain features. Here's a couple workflow tips that make my life easier.&lt;/p&gt;
&lt;h3&gt;Better git tag listing&lt;/h3&gt;
&lt;p&gt;Based on Peter Hutterer's &lt;a href="http://who-t.blogspot.com/2012/06/git-branch-info.html"&gt;'git bi'&lt;/a&gt; alias for improved branch listing (which is great and highly recommended), I made one for improved tags output that I mapped as 'git tags'. Output looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-S1JscfM_bNg/U8WjuPH4hYI/AAAAAAAAAEc/6oZXuvPiHh8/s1600/Screenshot+from+2014-07-15+17:56:45.png"&gt;&lt;img alt="" height="109" src="http://1.bp.blogspot.com/-S1JscfM_bNg/U8WjuPH4hYI/AAAAAAAAAEc/6oZXuvPiHh8/s1600/Screenshot+from+2014-07-15+17:56:45.png" width="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shows tag name, commit message, commit ID, and date, all colorized. Commit message is redundant for many projects that tag the release commit, but it's interesting in some cases.&lt;/li&gt;
&lt;li&gt;Tags are listed by date rather than alphabetically. Some projects change tag string formats, or versioning schemes, that then don't sort correctly when listed alphabetically. Sorting by date makes it easy to see the latest tag. Often I just want to know what the latest tag or the latest stable release is, this makes it easy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The alias code is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
   &lt;span class="na"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!sh -c &amp;#39; \&lt;/span&gt;
&lt;span class="na"&gt;git for-each-ref --format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;%(refname:short)\&amp;quot; refs/tags | \&lt;/span&gt;
&lt;span class="na"&gt;while read tag; do \&lt;/span&gt;
   &lt;span class="na"&gt;git --no-pager log -1 --format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;format:\&amp;quot;$tag %at\&amp;quot; $tag; echo; \&lt;/span&gt;
&lt;span class="na"&gt;done | \&lt;/span&gt;
&lt;span class="na"&gt;sort -k 2 | cut -f 1 --delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot; \&amp;quot; | \&lt;/span&gt;
&lt;span class="na"&gt;while read tag; do \&lt;/span&gt;
   &lt;span class="na"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;%Cred$tag:%Cblue %s %Cgreen%h%Creset (%ai)\&amp;quot;; \&lt;/span&gt;
&lt;span class="s"&gt;   git --no-pager log -1 --format=format:\&amp;quot;$fmt\&amp;quot; $tag; echo; \&lt;/span&gt;
&lt;span class="na"&gt;done&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Find the first tag that contains a commit&lt;/h3&gt;
&lt;p&gt;This seems to come up quite a bit for me. An example is &lt;a href="http://www.redhat.com/archives/libvir-list/2014-July/msg00832.html"&gt;here&lt;/a&gt;; a user was asking about a virt-install feature, and I wanted to tell them what version it appeared in. I grepped &lt;code&gt;git log&lt;/code&gt;, found the commit, then ran:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git describe --contains 87a611b5470d9b86bf57a71ce111fa1d41d8e2cd
&lt;span class="go"&gt;v1.0.0~201&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That shows me that v1.0.0 was the first release with the feature they wanted, just take whatever is to the left of the tilde.&lt;/p&gt;
&lt;p&gt;This often comes in handy with backporting as well: a developer will point me at a bug fix commit ID, I run git describe to see what upstream version it was released in, so I know what fedora package versions are lacking the fix.&lt;/p&gt;
&lt;p&gt;Another tip here is to use the --match option to only search tags matching a particular glob. I've used this to filter out matching against a maintenance or bugfix release branch, when I only wanted to search major version releases.&lt;/p&gt;
&lt;h3&gt;Don't pull tags from certain remotes&lt;/h3&gt;
&lt;p&gt;For certain repos like qemu.git, I add a lot of git remotes pointing to individual developer's trees for occasional patch testing. However if trees have lots of non-upstream tags, like for use with pull-requests, they can interfere with my workflow for backporting patches. Use the --no-tags option for this: &lt;code&gt;git remote add --no-tags $repo&lt;/code&gt;&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Using CPU host-passthrough with virt-manager</title><link href="https://crobinso.github.io/2016/01/using-cpu-host-passthrough-with-virt.html" rel="alternate"></link><published>2016-01-15T10:00:00-05:00</published><updated>2016-01-15T10:00:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-01-15:/2016/01/using-cpu-host-passthrough-with-virt.html</id><summary type="html">&lt;p&gt;I described virt-manager's CPU model default in &lt;a href="http://blog.wikichoon.com/2014/03/virt-manager-improved-cpu-model-default.html"&gt;this post&lt;/a&gt;. In that post I explained the difficulties of using either of the libvirt options for mirroring the host CPU: &lt;strong&gt;mode=host-model&lt;/strong&gt; still has operational issues, and &lt;strong&gt;mode=host-passthrough&lt;/strong&gt; isn't recommended for use with libvirt over supportability concerns.&lt;/p&gt;
&lt;p&gt;Unfortunately since writing that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I described virt-manager's CPU model default in &lt;a href="http://blog.wikichoon.com/2014/03/virt-manager-improved-cpu-model-default.html"&gt;this post&lt;/a&gt;. In that post I explained the difficulties of using either of the libvirt options for mirroring the host CPU: &lt;strong&gt;mode=host-model&lt;/strong&gt; still has operational issues, and &lt;strong&gt;mode=host-passthrough&lt;/strong&gt; isn't recommended for use with libvirt over supportability concerns.&lt;/p&gt;
&lt;p&gt;Unfortunately since writing that post the situation hasn't improved any, and since host-passthrough is the only reliably way to expose the full capabilities of the host CPU to the VM, users regularly want to enable it. This is particularly apparent if trying to do nested virt, which often doesn't work on Intel CPUs unless host-passthrough is used.&lt;/p&gt;
&lt;p&gt;However we don't explicitly expose this option in virt-manager since it's not generally recommended for libvirt usage. You &lt;em&gt;can&lt;/em&gt; however still enable it in virt-manager:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to VM Details-&gt;CPU&lt;/li&gt;
&lt;li&gt;Enter &lt;strong&gt;host-passthrough&lt;/strong&gt; in the CPU model field&lt;/li&gt;
&lt;li&gt;Click Apply&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-NBBPSoa4T6E/Vohv9ZI01YI/AAAAAAAAA1U/_-1K9y7PtU8/s1600/Screenshot%2Bfrom%2B2016-01-02%2B19-48-35.png"&gt;&lt;img alt="" height="365" src="https://3.bp.blogspot.com/-NBBPSoa4T6E/Vohv9ZI01YI/AAAAAAAAA1U/_-1K9y7PtU8/s400/Screenshot%2Bfrom%2B2016-01-02%2B19-48-35.png" width="400"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>github 'hub' command line tool</title><link href="https://crobinso.github.io/2016/01/github-hub-command-line-tool.html" rel="alternate"></link><published>2016-01-13T10:00:00-05:00</published><updated>2016-01-13T10:00:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-01-13:/2016/01/github-hub-command-line-tool.html</id><summary type="html">&lt;p&gt;I don't often need to contribute patches to code hosted on github; most of the projects I contribute to are either old school and don't use github for anything but mirroring their main git repo, or are small projects I entirely maintain so I don't submit pull-requests.&lt;/p&gt;
&lt;p&gt;But when I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I don't often need to contribute patches to code hosted on github; most of the projects I contribute to are either old school and don't use github for anything but mirroring their main git repo, or are small projects I entirely maintain so I don't submit pull-requests.&lt;/p&gt;
&lt;p&gt;But when I do need to submit patches, &lt;a href="https://hub.github.com/"&gt;github's hub tool&lt;/a&gt; makes my life a lot simpler, which allows forking repositories and submitting pull-requests very easily from the command line.&lt;/p&gt;
&lt;p&gt;The 'hub' tool wants to be installed as an alias for 'git'. I originally tried that, but it made my bash prompt insanely slow since I show the &lt;a href="https://fedoraproject.org/wiki/Git_quick_reference#Display_current_branch_in_bash"&gt;current git branch and dirty state in my bash prompt&lt;/a&gt;. When I first encountered this, I filed a &lt;a href="https://github.com/github/hub/issues/254"&gt;bug&lt;/a&gt; against the hub tool (with a bogus workaround), and nowadays it seems they have a &lt;a href="https://github.com/github/hub#is-your-shell-prompt-slow"&gt;disclaimer in their README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Their recommended fix is to &lt;code&gt;s/git/command git/g&lt;/code&gt; in git-prompt.sh, which doesn't work too well if you use the linked fedora suggestion of pointing at the package installed file in /usr/share, so I avoid the alias. You can run 'hub' standalone, but instead I like to do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; sudo dnf install hub
 ln -s /usr/bin/hub /usr/libexec/git-core/git-hub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I can &lt;code&gt;git hub fork&lt;/code&gt; and &lt;code&gt;git hub pull-request&lt;/code&gt; all I want :)&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>qemu:///system vs qemu:///session</title><link href="https://crobinso.github.io/2016/01/qemusystem-vs-qemusession.html" rel="alternate"></link><published>2016-01-11T08:00:00-05:00</published><updated>2016-01-11T08:00:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-01-11:/2016/01/qemusystem-vs-qemusession.html</id><summary type="html">&lt;p&gt;If you've spent time using libvirt apps like virt-manager, you've likely seen references to &lt;a href="https://libvirt.org/uri.html"&gt;libvirt URIs&lt;/a&gt;. The URI is how users or apps tell libvirt what hypervisor (qemu, xen, lxc, etc) to connect to, what host it's on, what authentication method to use, and a few other bits. &lt;/p&gt;
&lt;p&gt;For QEMU …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you've spent time using libvirt apps like virt-manager, you've likely seen references to &lt;a href="https://libvirt.org/uri.html"&gt;libvirt URIs&lt;/a&gt;. The URI is how users or apps tell libvirt what hypervisor (qemu, xen, lxc, etc) to connect to, what host it's on, what authentication method to use, and a few other bits. &lt;/p&gt;
&lt;p&gt;For QEMU/KVM (and a few other hypervisors), there's a concept of &lt;strong&gt;system&lt;/strong&gt; URI vs &lt;strong&gt;session&lt;/strong&gt; URI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;qemu:///system&lt;/strong&gt;: Connects to the system libvirtd instance, the one launched by systemd. libvirtd is running as root, so has access to all host resources. qemu VMs are launched as the unprivileged 'qemu' user, though libvirtd can grant the VM selective access to root owned resources. Daemon config is in /etc/libvirt, VM logs and other bits are stored in /var/lib/libvirt. virt-manager and big management apps like Openstack and oVirt use this by default.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;qemu:///session&lt;/strong&gt;: Connects to a libvirtd instance running as the app user, the daemon is auto-launched if it's not already running. libvirt and all VMs run as the app user. All config and logs and disk images are stored in $HOME. This means each user has their own qemu:///session VMs, separate from all other users. gnome-boxes and libguestfs use this by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That describes the 'what', but the 'why' of it is a bigger story. The privilege level of the daemon and VMs have pros and cons depending on your usecase. The easiest way to understand the benefit of one over the other is to list the [problems]{.underline} with each setup.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;qemu:///system&lt;/strong&gt; runs libvirtd as root, and access is mediated by polkit. This means if you are connecting to it as a regular user (like when launching virt-manager), you need to enter the host root password, which is annoying and not generally desktop usecase friendly. There are &lt;a href="http://blog.wikichoon.com/2016/01/polkit-password-less-access-for-libvirt.html"&gt;ways to work around it&lt;/a&gt; but it requires explicit admin configuration.&lt;/p&gt;
&lt;p&gt;Desktop use cases also suffer since VMs are running as the 'qemu' user, but the app (like virt-manager) is running as your local user. For example, say you download an ISO to $HOME and want to attach it to a VM. The VM is running as unprivileged user=qemu and can't access your $HOME, so libvirt has to change the ISO file owner to qemu:qemu and virt-manager has to give search access to $HOME for user=qemu. It's a pain for apps to handle, and it's confusing for users, but after dealing with it for a while in virt-manager we've made it generally work. (Though try giving a VM access to a file on a fat32 USB drive that was automounted by your desktop session...)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;qemu:///session&lt;/strong&gt; runs libvirtd and VMs as your unprivileged user. This integrates better with desktop use cases since permissions aren't an issue, no root password is required, and each user has their own separate pool of VMs.&lt;/p&gt;
&lt;p&gt;However because nothing in the chain is privileged, any VM setup tasks that need host admin privileges aren't an option. Unfortunately this includes most general purpose networking options.&lt;/p&gt;
&lt;p&gt;The default qemu mode in this case is &lt;a href="http://wiki.qemu.org/Documentation/Networking#User_Networking_.28SLIRP.29"&gt;usermode networking (or SLIRP)&lt;/a&gt;. This is an IP stack implemented in userspace. This has many drawbacks: the VM can not easily be accessed by the outside world, the VM can access talk to the outside world but only over a limited number of networking protocols, and it's very slow.&lt;/p&gt;
&lt;p&gt;There [is]{.underline} an option for qemu:///session VMs to use a privileged networking setup, via the setuid &lt;a href="http://wiki.qemu.org/Features-Done/HelperNetworking"&gt;qemu-bridge-helper&lt;/a&gt;. Basically the host admin sets up a bridge, adds it to a whitelist at /etc/qemu/bridge.conf, then it's available for unprivileged qemu instances. By default on Fedora this contains 'virbr0' which is the default virtual network bridge provided by the system libvirtd instance, and what qemu:///system VMs typically use.&lt;/p&gt;
&lt;p&gt;gnome-boxes originally used usermode networking, but switched around Fedora 21 timeframe to use virbr0 via qemu-bridge-helper. But that's dependent on virbr0 being set up correctly by the host admin, or via package install (libvirt-daemon-config-network package on Fedora).&lt;/p&gt;
&lt;p&gt;qemu:///session also misses some less common features that require host admin privileges, like host PCI device assignment. Also VM autostart doesn't work as expected because the session daemon itself isn't autostarted.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Apps&lt;/strong&gt; have to decide for themselves which libvirtd mode to use, depending on their use case.&lt;/p&gt;
&lt;p&gt;qemu:///system is completely fine for big apps like oVirt and Openstack that require admin access to the virt hosts anyways.&lt;/p&gt;
&lt;p&gt;virt-manager largely defaults to qemu:///system because that's what it has always done, and that default long precedes qemu-bridge-helper. We could switch but it would just trade one set of issues for another. virt-manager [can]{.underline} be used with qemu:///session though (or any URI for that matter).&lt;/p&gt;
&lt;p&gt;libguestfs uses qemu:///session since it avoids all the permission issues and the VM appliance doesn't really care about networking.&lt;/p&gt;
&lt;p&gt;gnome-boxes prioritized desktop integration from day 1, so qemu:///session was the natural choice. But they've struggled with the networking issues in various forms.&lt;/p&gt;
&lt;p&gt;Other apps are in a pickle: they would like to use qemu:///session to avoid the permission issues, but they also need to tweak the network setup. This is the case &lt;a href="https://github.com/pradels/vagrant-libvirt/issues/272"&gt;vagrant-libvirt currently finds itself in&lt;/a&gt;.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Running KVM arm 32 on AArch64</title><link href="https://crobinso.github.io/2016/01/running-kvm-arm-32-on-aarch64.html" rel="alternate"></link><published>2016-01-08T09:00:00-05:00</published><updated>2016-01-08T09:00:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-01-08:/2016/01/running-kvm-arm-32-on-aarch64.html</id><summary type="html">&lt;p&gt;Just a little tip: &lt;a href="https://www.redhat.com/archives/libvirt-announce/2015-July/msg00002.html"&gt;libvirt 1.2.17&lt;/a&gt; fixed the last bits necessary to run 32bit arm VMs on AArch64 hosts with KVM acceleration. We just needed to &lt;a href="https://github.com/libvirt/libvirt/commit/daf2f514456c03ce99075b359b14e5108dd2da56"&gt;make sure&lt;/a&gt; that libvirt advertised the capability, all the lower level qemu and kernel bits were already in place.&lt;/p&gt;
&lt;p&gt;Just select &lt;strong&gt;armv7l …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a little tip: &lt;a href="https://www.redhat.com/archives/libvirt-announce/2015-July/msg00002.html"&gt;libvirt 1.2.17&lt;/a&gt; fixed the last bits necessary to run 32bit arm VMs on AArch64 hosts with KVM acceleration. We just needed to &lt;a href="https://github.com/libvirt/libvirt/commit/daf2f514456c03ce99075b359b14e5108dd2da56"&gt;make sure&lt;/a&gt; that libvirt advertised the capability, all the lower level qemu and kernel bits were already in place.&lt;/p&gt;
&lt;p&gt;Just select &lt;strong&gt;armv7l&lt;/strong&gt; in virt-manager's UI when creating a new VM, or pass &lt;strong&gt;--arch armv7l&lt;/strong&gt; to virt-install, if on an aarch64 host, and KVM will be used if it's available.&lt;/p&gt;
&lt;p&gt;In my (very brief) testing the VM seems to be much faster than 32-on-32 KVM, but I don't think that's a surprise given the speed difference between the host machines.&lt;/p&gt;
&lt;p&gt;Update: Marcin &lt;a href="https://marcin.juszkiewicz.com.pl/2016/01/17/running-32-bit-arm-virtual-machine-on-aarch64-hardware/"&gt;posted&lt;/a&gt; some virt-manager screenshots and performance info.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>tip: Launch a new terminal with F1</title><link href="https://crobinso.github.io/2016/01/tip-launch-new-terminal-with-f1.html" rel="alternate"></link><published>2016-01-06T10:00:00-05:00</published><updated>2016-01-06T10:00:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-01-06:/2016/01/tip-launch-new-terminal-with-f1.html</id><summary type="html">&lt;p&gt;Back when I first switched to gnome-shell with Fedora 16, I read a lot of blog posts and wiki pages about keyboard shortcuts, extensions that people were using, praise and complaints, etc. Somewhere in all that (I can't remember where), I picked up a tip that I now use dozens …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back when I first switched to gnome-shell with Fedora 16, I read a lot of blog posts and wiki pages about keyboard shortcuts, extensions that people were using, praise and complaints, etc. Somewhere in all that (I can't remember where), I picked up a tip that I now use dozens of times a day and couldn't live without: remapping F1 to launch a new terminal.&lt;/p&gt;
&lt;p&gt;It didn't even take much training to get used to it, because the method is just so much quicker than anything involving the mouse, or super key, or alt+f2, that I took to it immediately. And from there it was a small step to get used to using &lt;code&gt;exit&lt;/code&gt; to actually quit a terminal, leading to drastically less mouse usage (yes my habits were quite crappy on gnome2).&lt;/p&gt;
&lt;p&gt;It also has the added benefit of unmapping the help dialog from F1, which I've never once used intentionally, and every unintentional usage (of which there were many) would make my machine churn pretty hard for a good few seconds before popping up the dialog.&lt;/p&gt;
&lt;p&gt;It's pretty easy to make the change on F23:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From gnome-shell desktop, go to Activities-&gt;Keyboard&lt;/li&gt;
&lt;li&gt;Navigate to Shortcuts-&gt;Custom Shortcuts&lt;/li&gt;
&lt;li&gt;Under launchers, disable 'Launch help browser'&lt;/li&gt;
&lt;li&gt;Under 'Custom shortcuts', click '+', map &lt;code&gt;F1&lt;/code&gt; to &lt;code&gt;gnome-terminal&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm sure if you use a single terminal + tmux, or guake, this isn't interesting, but maybe it will help someone like it helped me.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Polkit password-less access for the 'libvirt' group</title><link href="https://crobinso.github.io/2016/01/polkit-password-less-access-for-libvirt.html" rel="alternate"></link><published>2016-01-04T08:00:00-05:00</published><updated>2016-01-04T08:00:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-01-04:/2016/01/polkit-password-less-access-for-libvirt.html</id><summary type="html">&lt;p&gt;Many users, who admin their own machines, want to be able to use tools like virt-manager without having to enter a root password. Just google 'virt-manager without password' and see all the hits. I've &lt;a href="https://goldmann.pl/blog/2012/12/03/configuring-polkit-in-fedora-18-to-access-virt-manager/"&gt;seen&lt;/a&gt; &lt;a href="https://niranjanmr.wordpress.com/2013/03/20/auth-libvirt-using-polkit-in-fedora-18/"&gt;many&lt;/a&gt; &lt;a href="http://www2.linuxsysadmintutorials.com/configure-polkit-to-run-virsh-as-a-normal-user/"&gt;blogs&lt;/a&gt; &lt;a href="https://www.rockpenguin.com/2014/03/allowing-non-root-users-access-to-libvirt-and-virsh-using-polkit/"&gt;and&lt;/a&gt; &lt;a href="https://major.io/2015/04/11/run-virsh-and-access-libvirt-as-a-regular-user/"&gt;articles&lt;/a&gt; over the years describing various ways to work around it.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many users, who admin their own machines, want to be able to use tools like virt-manager without having to enter a root password. Just google 'virt-manager without password' and see all the hits. I've &lt;a href="https://goldmann.pl/blog/2012/12/03/configuring-polkit-in-fedora-18-to-access-virt-manager/"&gt;seen&lt;/a&gt; &lt;a href="https://niranjanmr.wordpress.com/2013/03/20/auth-libvirt-using-polkit-in-fedora-18/"&gt;many&lt;/a&gt; &lt;a href="http://www2.linuxsysadmintutorials.com/configure-polkit-to-run-virsh-as-a-normal-user/"&gt;blogs&lt;/a&gt; &lt;a href="https://www.rockpenguin.com/2014/03/allowing-non-root-users-access-to-libvirt-and-virsh-using-polkit/"&gt;and&lt;/a&gt; &lt;a href="https://major.io/2015/04/11/run-virsh-and-access-libvirt-as-a-regular-user/"&gt;articles&lt;/a&gt; over the years describing various ways to work around it.&lt;/p&gt;
&lt;p&gt;The password prompting is via libvirt's polkit integration. The idea is that we want the applications to run as a regular unprivileged user (running GUI apps as root is considered a no-no), and only use the root authentication for talking to system libvirt instance. Most workarounds suggest installing a polkit rule to allow your user, or a particular user group, to access libvirt without needing to enter the root password.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://www.redhat.com/archives/libvir-list/2015-June/msg00000.html"&gt;libvirt v1.2.16&lt;/a&gt; we finally &lt;a href="https://github.com/libvirt/libvirt/commit/e94979e901517af9fdde358d7b7c92cc055dd50c"&gt;added&lt;/a&gt; official support for this (and backported to Fedora22+). The group is predictably called 'libvirt'. This matches polkit rules that debian and suse were already shipping too.&lt;/p&gt;
&lt;p&gt;So just add your user to the 'libvirt' group and enjoy passwordless virt-manager usage:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;usermod --append --groups libvirt $(whoami)&lt;/code&gt;&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>UEFI support in virt-install and virt-manager</title><link href="https://crobinso.github.io/2016/01/uefi-support-in-virt-install-and-virt.html" rel="alternate"></link><published>2016-01-02T17:19:00-05:00</published><updated>2016-01-02T17:19:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2016-01-02:/2016/01/uefi-support-in-virt-install-and-virt.html</id><summary type="html">&lt;p&gt;One of the new features in &lt;a href="http://blog.wikichoon.com/2015/05/virt-manager-120-released.html"&gt;virt-manager 1.2.0&lt;/a&gt; (from back in May) is user friendly support for enabling UEFI.&lt;/p&gt;
&lt;p&gt;First a bit about terminology: When UEFI is packaged up to run in an x86 VM, it's often called &lt;strong&gt;OVMF&lt;/strong&gt;. When UEFI is packaged up to run in an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the new features in &lt;a href="http://blog.wikichoon.com/2015/05/virt-manager-120-released.html"&gt;virt-manager 1.2.0&lt;/a&gt; (from back in May) is user friendly support for enabling UEFI.&lt;/p&gt;
&lt;p&gt;First a bit about terminology: When UEFI is packaged up to run in an x86 VM, it's often called &lt;strong&gt;OVMF&lt;/strong&gt;. When UEFI is packaged up to run in an AArch64 VM, it's often called &lt;strong&gt;AAVMF&lt;/strong&gt;. But I'll just refer to all of it as UEFI.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Using UEFI with virt-install and virt-manager&lt;/h3&gt;
&lt;p&gt;The first step to enable this for VMs is to install the binaries. UEFI still has some &lt;a href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU#EDK2_Licensing_Issues"&gt;licensing issues&lt;/a&gt; that make it incompatible with Fedora's policies, so the bits are hosted in an external repo. Details for installing the repo and UEFI bits are &lt;a href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU#Firmware_installation"&gt;over here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the bits are installed (and you're on Fedora 22 or later), virt-manager and virt-install provide simple options to enable UEFI when creating VMs.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marcin.juszkiewicz.com.pl/2015/04/17/running-vms-on-fedoraaarch64/"&gt;Marcin has a great post&lt;/a&gt; with screenshots describing this for virt-manager (for aarch64, but the steps are identical for x86 VMs).&lt;/p&gt;
&lt;p&gt;For virt-install it's as simple as doing: &lt;code&gt;sudo virt-install --boot uefi ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;virt-install will get the binary paths from libvirt and set everything up with the optimal config. If virt-install can't figure out the correct parameters, like if no UEFI binaries are installed, you'll see an error like: ERROR    Error: --boot uefi: Don't know how to setup UEFI for arch 'x86'&lt;/p&gt;
&lt;p&gt;See 'virt-install --boot help' if you need to tweak the parameters individually.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Implementing support in applications&lt;/h3&gt;
&lt;p&gt;Libvirt needs to know about UEFIto NVRAM config file mapping, so it can advertise it to tools like virt-manager/virt-install. Libvirt looks at a hardcoded list of known host paths to see if any firmware is installed, and if so, lists those paths in domain capabilities output (virsh domcapabilities). Libvirt in Fedora 22+ knows to look for the paths provided by the repo mentioned above, so just installing the firmware is sufficient to make libvirt advertise UEFI support.&lt;/p&gt;
&lt;p&gt;The domain capabilities output only lists the firmware path and the associated variable store path. Notably lacking is any indication of what architecture the binaries are meant for. So tools need to determine this mapping themselves.&lt;/p&gt;
&lt;p&gt;virt-manager/virt-install and libguestfs use a similar path matching heuristic. The &lt;a href="https://github.com/libguestfs/libguestfs/blob/master/v2v/utils.ml#L89"&gt;libguestfs code&lt;/a&gt; is a good reference:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;guest_arch&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i386&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i486&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i586&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i686&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/share/edk2.git/ovmf-ia32/OVMF_CODE-pure-efi.fd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;/usr/share/edk2.git/ovmf-ia32/OVMF_VARS-pure-efi.fd&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x86_64&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/share/OVMF/OVMF_CODE.fd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;/usr/share/OVMF/OVMF_VARS.fd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;/usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;/usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aarch64&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/share/AAVMF/AAVMF_CODE.fd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;/usr/share/AAVMF/AAVMF_VARS.fd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;/usr/share/edk2.git/aarch64/QEMU_EFI-pflash.raw&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;/usr/share/edk2.git/aarch64/vars-template-pflash.raw&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
   &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;don&amp;#39;t know how to convert UEFI guests for architecture %s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;guest_arch&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Having to track this in every app is quite crappy, but it's the only good solution at the moment. Hopefully long term libvirt &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1295146"&gt;will grow some solution&lt;/a&gt; that makes this easier for applications.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager 1.3.0 released!</title><link href="https://crobinso.github.io/2015/11/virt-manager-130-released.html" rel="alternate"></link><published>2015-11-25T15:42:00-05:00</published><updated>2015-11-25T15:42:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2015-11-25:/2015/11/virt-manager-130-released.html</id><summary type="html">&lt;p&gt;Last night I released &lt;a href="https://www.redhat.com/archives/virt-tools-list/2015-November/msg00150.html"&gt;virt-manager-1.3.0&lt;/a&gt;. Not too much exciting in this release, just a lot of little improvements and bug fixes.&lt;/p&gt;
&lt;p&gt;The highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git hosting moved to http://github.com/virt-manager/virt-manager&lt;/li&gt;
&lt;li&gt;Switch translation infrastructure from transifex to fedora.zanata.org&lt;/li&gt;
&lt;li&gt;Add dogtail UI tests and infrastructure&lt;/li&gt;
&lt;li&gt;Improved …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Last night I released &lt;a href="https://www.redhat.com/archives/virt-tools-list/2015-November/msg00150.html"&gt;virt-manager-1.3.0&lt;/a&gt;. Not too much exciting in this release, just a lot of little improvements and bug fixes.&lt;/p&gt;
&lt;p&gt;The highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git hosting moved to http://github.com/virt-manager/virt-manager&lt;/li&gt;
&lt;li&gt;Switch translation infrastructure from transifex to fedora.zanata.org&lt;/li&gt;
&lt;li&gt;Add dogtail UI tests and infrastructure&lt;/li&gt;
&lt;li&gt;Improved support for s390x kvm (Kevin Zhao)&lt;/li&gt;
&lt;li&gt;virt-install and virt-manager now remove created disk images if VM install startup fails&lt;/li&gt;
&lt;li&gt;Replace urlgrabber usage with requests and urllib2&lt;/li&gt;
&lt;li&gt;virt-install: add --network virtualport support for openvswitch (Daniel P. Berrange)&lt;/li&gt;
&lt;li&gt;virt-install: support multiple --security labels&lt;/li&gt;
&lt;li&gt;virt-install: support --features kvm_hidden=on|off (Pavel Hrdina)&lt;/li&gt;
&lt;li&gt;virt-install: add --features pmu=on|off&lt;/li&gt;
&lt;li&gt;virt-install: add --features pvspinlock=on|off (Abhijeet Kasurde)&lt;/li&gt;
&lt;li&gt;virt-install: add --events on_lockfailure=on|off (Abhijeet Kasurde)&lt;/li&gt;
&lt;li&gt;virt-install: add --network link_state=up|down&lt;/li&gt;
&lt;li&gt;virt-install: add --vcpu placement=static|auto&lt;/li&gt;
&lt;/ul&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager 1.2.0 released!</title><link href="https://crobinso.github.io/2015/05/virt-manager-120-released.html" rel="alternate"></link><published>2015-05-04T21:55:00-04:00</published><updated>2015-05-04T21:55:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2015-05-04:/2015/05/virt-manager-120-released.html</id><summary type="html">&lt;p&gt;Today I released virt-manager-1.2.0. You can read the release announcement &lt;a href="https://www.redhat.com/archives/virt-tools-list/2015-May/msg00010.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This release includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OVMF/AAVMF Support (Laszlo Ersek, Giuseppe Scrivano, Cole Robinson)&lt;/li&gt;
&lt;li&gt;Improved support for AArch64 qemu/kvm&lt;/li&gt;
&lt;li&gt;virt-install: Support --disk type=network parameters&lt;/li&gt;
&lt;li&gt;virt-install: Make --disk $URL just work&lt;/li&gt;
&lt;li&gt;virt-install: Add --disk sgio= option (Giuseppe Scrivano …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Today I released virt-manager-1.2.0. You can read the release announcement &lt;a href="https://www.redhat.com/archives/virt-tools-list/2015-May/msg00010.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This release includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OVMF/AAVMF Support (Laszlo Ersek, Giuseppe Scrivano, Cole Robinson)&lt;/li&gt;
&lt;li&gt;Improved support for AArch64 qemu/kvm&lt;/li&gt;
&lt;li&gt;virt-install: Support --disk type=network parameters&lt;/li&gt;
&lt;li&gt;virt-install: Make --disk $URL just work&lt;/li&gt;
&lt;li&gt;virt-install: Add --disk sgio= option (Giuseppe Scrivano)&lt;/li&gt;
&lt;li&gt;addhardware: default to an existing bus when adding a new disk (Giuseppe Scrivano)&lt;/li&gt;
&lt;li&gt;virt-install: Add --input device option&lt;/li&gt;
&lt;li&gt;virt-manager: Unify storagebrowser and storage details functionality&lt;/li&gt;
&lt;li&gt;virt-manager: allow setting a custom connection row name&lt;/li&gt;
&lt;li&gt;virt-install: Support --hostdev scsi passthrough&lt;/li&gt;
&lt;li&gt;virt-install: Fill in a bunch of --graphics spice options&lt;/li&gt;
&lt;li&gt;Disable spice image compression for new local VMs&lt;/li&gt;
&lt;li&gt;virt-manager: big reworking of the migration dialog&lt;/li&gt;
&lt;/ul&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Fedora 22 Virt Test Day is Thu Apr 16!</title><link href="https://crobinso.github.io/2015/04/fedora-22-virt-test-day-is-thu-apr-16.html" rel="alternate"></link><published>2015-04-13T21:32:00-04:00</published><updated>2015-04-13T21:32:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2015-04-13:/2015/04/fedora-22-virt-test-day-is-thu-apr-16.html</id><summary type="html">&lt;p&gt;A reminder that the Fedora 22 Virt Test Day is this coming Thu Apr 16. Check out the test day landing page:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's a great time to make sure your virt workflow is still working correctly with the latest packages in Fedora 22. No …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A reminder that the Fedora 22 Virt Test Day is this coming Thu Apr 16. Check out the test day landing page:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's a great time to make sure your virt workflow is still working correctly with the latest packages in Fedora 22. No requirement to run through test cases on the wiki, just show up and let us know what works (or breaks).&lt;/p&gt;
&lt;p&gt;Updating to a development release of Fedora scares some people, but it's NOT required to help out with the test day: you can test the latest virt bits on the latest Fedora release courtesy of the virt-preview repo. For more details, as well as easy instructions on updating to Fedora 22, see:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization#What.27s_needed_to_test"&gt;https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization#What.27s_needed_to_test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Though running latest Fedora 22 on a physical machine is still preferred :)&lt;/p&gt;
&lt;p&gt;If you want to help out, pop into #fedora-test-day on Thursday and give us a shout!&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>python-bugzilla 1.2.0 released</title><link href="https://crobinso.github.io/2015/04/python-bugzilla-120-released.html" rel="alternate"></link><published>2015-04-08T17:16:00-04:00</published><updated>2015-04-08T17:16:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2015-04-08:/2015/04/python-bugzilla-120-released.html</id><summary type="html">&lt;p&gt;I've just released &lt;a href="https://lists.fedorahosted.org/pipermail/python-bugzilla/2015-April/000397.html"&gt;python-bugzilla-1.2.0&lt;/a&gt;. This release includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add bugzilla new/query/modify --field flag (Arun Babu Neelicattu)&lt;/li&gt;
&lt;li&gt;API support for ExternalBugs (Arun Babu Neelicattu, Brian Bouterse)&lt;/li&gt;
&lt;li&gt;Add new/modify --alias support (Adam Williamson)&lt;/li&gt;
&lt;li&gt;Bugzilla.logged_in now returns live state (Arun Babu Neelicattu)&lt;/li&gt;
&lt;li&gt;Fix getbugs API with latest Bugzilla …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I've just released &lt;a href="https://lists.fedorahosted.org/pipermail/python-bugzilla/2015-April/000397.html"&gt;python-bugzilla-1.2.0&lt;/a&gt;. This release includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add bugzilla new/query/modify --field flag (Arun Babu Neelicattu)&lt;/li&gt;
&lt;li&gt;API support for ExternalBugs (Arun Babu Neelicattu, Brian Bouterse)&lt;/li&gt;
&lt;li&gt;Add new/modify --alias support (Adam Williamson)&lt;/li&gt;
&lt;li&gt;Bugzilla.logged_in now returns live state (Arun Babu Neelicattu)&lt;/li&gt;
&lt;li&gt;Fix getbugs API with latest Bugzilla releases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'd like to expand a bit more on a couple of these changes.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;strong&gt; bugzilla new/query/modify --field flag &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Arun had a good idea about adding a generic --field option to the CLI. Rather than depend on /usr/bin/bugzilla to grow a specific command line option for some new custom bugzilla field, you can use --field to get your work done.&lt;/p&gt;
&lt;p&gt;For example, Red Hat bugzilla has a custom field called 'cf_pm_score' that's used for internal RHEL workflow. However /usr/bin/bugzilla doesn't have any explicit command line support for this field.&lt;/p&gt;
&lt;p&gt;But if you wanted to alter the cf_pm_score field from the command line, you can now do:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bugzilla modify $BUGID --field cf_pm_score=100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Of course, for popular bugzilla fields we should make sure the command line tool has an explicit and document option, but this takes the pressure off of us to add an option for every custom Red Hat extension.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;strong&gt; Bugzilla.logged_in now returns live state &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A recurring problem people hit with the bugzilla API is receiving unexpected results because they aren't actually logged into bugzilla. This often happens when their cached bugzilla token has expired. For most operations the bugzilla API doesn't give any error in this case, and there's historically been no simple API to ask 'am I actually logged in?'&lt;/p&gt;
&lt;p&gt;The Bugzilla API class has long had a property 'logged_in' that wasn't very useful, only returning True for a very specific circumstance. Arun extended this with a heuristic to determine if we are _actually_ logged in to bugzilla.&lt;/p&gt;
&lt;p&gt;So if you have any scripts that talk to the python-bugzilla API and depend on actually being logged in, add a check at the top of your code to bail out if logged_in == False and save yourself some future confusion :)&lt;/p&gt;
&lt;p&gt;IIRC the next major version of bugzilla does provide some API support in this area, so hopefully we can expand on this when newer bugzilla version are deployed.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>cubietruck setup, though my card reader is flaky</title><link href="https://crobinso.github.io/2015/02/cubietruck-setup-though-my-card-reader.html" rel="alternate"></link><published>2015-02-28T10:39:00-05:00</published><updated>2015-02-28T10:39:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2015-02-28:/2015/02/cubietruck-setup-though-my-card-reader.html</id><summary type="html">&lt;p&gt;Finally setup my cubietruck that I purchased late last year. Here it is under my desk running Fedora 21:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-56h2OT138dY/VPHdMZi5DeI/AAAAAAAAAFs/8Adre1SpAQA/s1600/IMAG0315.jpg"&gt;&lt;img alt="" height="181" src="http://2.bp.blogspot.com/-56h2OT138dY/VPHdMZi5DeI/AAAAAAAAAFs/8Adre1SpAQA/s1600/IMAG0315.jpg" width="320"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Riveting, I know.&lt;/p&gt;
&lt;p&gt;I mostly just followed bits from &lt;a href="https://rwmj.wordpress.com/2013/12/13/kvm-working-on-the-cubietruck/"&gt;Rich's&lt;/a&gt; and &lt;a href="http://kashyapc.com/2014/12/09/cubietruck-qemu-kvm-and-fedora/"&gt;Kashyap's&lt;/a&gt; blog posts, and the &lt;a href="http://fedoraproject.org/wiki/Architectures/ARM/F21/Installation"&gt;Fedora ARM install instructions&lt;/a&gt;. I used this &lt;a href="https://www.amazon.com/gp/product/B009T2ZR6W/ref=oh_aui_search_detailpage?ie=UTF8&amp;amp;psc=1"&gt;serial adapter&lt;/a&gt;, though note you need to make …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Finally setup my cubietruck that I purchased late last year. Here it is under my desk running Fedora 21:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-56h2OT138dY/VPHdMZi5DeI/AAAAAAAAAFs/8Adre1SpAQA/s1600/IMAG0315.jpg"&gt;&lt;img alt="" height="181" src="http://2.bp.blogspot.com/-56h2OT138dY/VPHdMZi5DeI/AAAAAAAAAFs/8Adre1SpAQA/s1600/IMAG0315.jpg" width="320"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Riveting, I know.&lt;/p&gt;
&lt;p&gt;I mostly just followed bits from &lt;a href="https://rwmj.wordpress.com/2013/12/13/kvm-working-on-the-cubietruck/"&gt;Rich's&lt;/a&gt; and &lt;a href="http://kashyapc.com/2014/12/09/cubietruck-qemu-kvm-and-fedora/"&gt;Kashyap's&lt;/a&gt; blog posts, and the &lt;a href="http://fedoraproject.org/wiki/Architectures/ARM/F21/Installation"&gt;Fedora ARM install instructions&lt;/a&gt;. I used this &lt;a href="https://www.amazon.com/gp/product/B009T2ZR6W/ref=oh_aui_search_detailpage?ie=UTF8&amp;amp;psc=1"&gt;serial adapter&lt;/a&gt;, though note you need to make sure to make sure the TX pin on the board is wired to the RX pin USB end, and vice versa. Probably obvious to some people but I would have been stumped if I hadn't seen it mentioned in an Amazon review.&lt;/p&gt;
&lt;p&gt;Everything is working now but my hardware has a bit of a malfunction that I mentioned in &lt;a href="https://lists.fedoraproject.org/pipermail/arm/2015-February/009120.html"&gt;this fedora-arm thread&lt;/a&gt;. Basically the device can boot off the SD card, but linux doesn't detect it. If I wiggle the card around a lot while inserting it I can get linux to detect it about 1/5 of the time, but after rebooting the device is back to not being detected. In the thread, Hans guessed that the card-detect pin is flaky or not connecting well, but it doesn't affect the cubieboard firmware which just ignores that pin and assumes the device is present.&lt;/p&gt;
&lt;p&gt;Since I was planning on using a SATA drive anyways, this isn't that big of a deal, just delete everything on the SD card except u-boot, and the SATA drive will be used /boot and /. But if I ever want to update u-boot on the SD card, I'll have to go through the whole wiggle process again and manually 'dd' it into place using the steps on the Fedora install page.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Fedora 22 Virt Test Day scheduled for Thu Apr 16</title><link href="https://crobinso.github.io/2015/02/fedora-22-virt-test-day-scheduled-for.html" rel="alternate"></link><published>2015-02-16T16:49:00-05:00</published><updated>2015-02-16T16:49:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2015-02-16:/2015/02/fedora-22-virt-test-day-scheduled-for.html</id><summary type="html">&lt;p&gt;Just a quick note that the Fedora 22 Virt Test Day is scheduled for Thursday April 16th. The inprogress landing page is at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're interested in helping out please mark your calendars.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a quick note that the Fedora 22 Virt Test Day is scheduled for Thursday April 16th. The inprogress landing page is at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2015-04-16_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're interested in helping out please mark your calendars.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>git up: The better git pull</title><link href="https://crobinso.github.io/2015/02/git-up-better-git-pull.html" rel="alternate"></link><published>2015-02-13T10:06:00-05:00</published><updated>2015-02-13T10:06:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2015-02-13:/2015/02/git-up-better-git-pull.html</id><summary type="html">&lt;p&gt;A while ago I stumbled across a nice git extension &lt;a href="https://github.com/aanand/git-up"&gt;'git up'&lt;/a&gt;. The &lt;a href="https://github.com/aanand/git-up#synopsis"&gt;README synopsis&lt;/a&gt; lays out the motivation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; has two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It merges upstream changes by default, when it's really more polite to &lt;a href="http://www.gitready.com/advanced/2009/02/11/pull-with-rebase.html"&gt;rebase over them&lt;/a&gt;, unless your collaborators enjoy a commit graph that looks like bedhead …&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A while ago I stumbled across a nice git extension &lt;a href="https://github.com/aanand/git-up"&gt;'git up'&lt;/a&gt;. The &lt;a href="https://github.com/aanand/git-up#synopsis"&gt;README synopsis&lt;/a&gt; lays out the motivation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; has two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It merges upstream changes by default, when it's really more polite to &lt;a href="http://www.gitready.com/advanced/2009/02/11/pull-with-rebase.html"&gt;rebase over them&lt;/a&gt;, unless your collaborators enjoy a commit graph that looks like bedhead.&lt;/li&gt;
&lt;li&gt;It only updates the branch you're currently on, which means &lt;code&gt;git push&lt;/code&gt; will shout at you for being behind on branches you don't particularly care about right now.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solve them once and for all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As implied above, git-up will update all your branches that are tracking a remote branch. This often comes in handy in fedora git repos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[crobinso@colepc openbios (master)]$&lt;/span&gt; fedpkg pull
&lt;span class="go"&gt;Already up-to-date.&lt;/span&gt;
&lt;span class="gp"&gt;[crobinso@colepc openbios (master)]$&lt;/span&gt; git up
&lt;span class="go"&gt;Fetching origin&lt;/span&gt;
&lt;span class="go"&gt;f20  fast-forwarding...&lt;/span&gt;
&lt;span class="go"&gt;master up to date&lt;/span&gt;
&lt;span class="go"&gt;returning to master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another useful bit is that it will stash and unstash uncommitted changes. Often times I find myself doing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[crobinso@colepc ~]$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; src/virt-manager/
&lt;span class="gp"&gt;#&lt;/span&gt; Hack some minor bug fix
&lt;span class="gp"&gt;[crobinso@colepc virt-manager (master *)]$&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; Oops, I should pull first, maybe the issue is fixed
&lt;span class="gp"&gt;[crobinso@colepc virt-manager (master *)]$&lt;/span&gt; git pull
&lt;span class="go"&gt;Cannot pull with rebase: You have unstaged changes.&lt;/span&gt;
&lt;span class="go"&gt;Please commit or stash them.&lt;/span&gt;
&lt;span class="gp"&gt;[crobinso@colepc virt-manager (master *)]$&lt;/span&gt; git up
&lt;span class="go"&gt;Fetching origin&lt;/span&gt;
&lt;span class="go"&gt;stashing 1 changes&lt;/span&gt;
&lt;span class="go"&gt;master up to date&lt;/span&gt;
&lt;span class="go"&gt;unstashing&lt;/span&gt;
&lt;span class="gp"&gt;[crobinso@colepc virt-manager (master *)]$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nowadays I don't even attempt the pull, &lt;code&gt;git up&lt;/code&gt; is my reflex. (And yes I should just make it a reflex that I switch to a branch before doing any hacking...)&lt;/p&gt;
&lt;p&gt;Nice to see that nowadays git-up is packaged in fedora, so grab it with &lt;code&gt;sudo yum install rubygem-git-up&lt;/code&gt;&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Setting up a minimal rbd/ceph server for libvirt testing</title><link href="https://crobinso.github.io/2014/12/setting-up-minimal-rbdceph-server-for.html" rel="alternate"></link><published>2014-12-15T11:21:00-05:00</published><updated>2014-12-15T11:21:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-12-15:/2014/12/setting-up-minimal-rbdceph-server-for.html</id><summary type="html">&lt;p&gt;In my &lt;a href="http://blog.wikichoon.com/2014/12/setting-up-minimal-gluster-server-for.html"&gt;last post&lt;/a&gt; I talked about setting up a minimal gluster server. Similarly this will describe how I set up a minimal single node rbd/ceph server in a VM for libvirt network storage testing.&lt;/p&gt;
&lt;p&gt;I pulled info from a &lt;a href="http://eu.ceph.com/docs/wip-6919/start/quick-start/"&gt;few&lt;/a&gt; &lt;a href="http://derekweitzel.blogspot.com/2012/02/ceph-on-fedora-16.html"&gt;different&lt;/a&gt; &lt;a href="http://dachary.org/?p=2374"&gt;places&lt;/a&gt; and a lot of other reading …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my &lt;a href="http://blog.wikichoon.com/2014/12/setting-up-minimal-gluster-server-for.html"&gt;last post&lt;/a&gt; I talked about setting up a minimal gluster server. Similarly this will describe how I set up a minimal single node rbd/ceph server in a VM for libvirt network storage testing.&lt;/p&gt;
&lt;p&gt;I pulled info from a &lt;a href="http://eu.ceph.com/docs/wip-6919/start/quick-start/"&gt;few&lt;/a&gt; &lt;a href="http://derekweitzel.blogspot.com/2012/02/ceph-on-fedora-16.html"&gt;different&lt;/a&gt; &lt;a href="http://dachary.org/?p=2374"&gt;places&lt;/a&gt; and a lot of other reading, but things just weren't working on F21; trying &lt;code&gt;systemctl start ceph&lt;/code&gt; just wasn't producing any output, and all the &lt;code&gt;ceph&lt;/code&gt; cli commands just hung. I had better success with F20.&lt;/p&gt;
&lt;p&gt;The main difficulty was figuring out a working ceph.conf. My VM's IP address is 1902.168.124.101, and its hostname is 'localceph', so here's what I ended up with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;auth cluster required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
&lt;span class="na"&gt;auth service required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
&lt;span class="na"&gt;auth client required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
&lt;span class="na"&gt;osd crush chooseleaf type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;osd pool default size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;[mon]&lt;/span&gt;
&lt;span class="na"&gt;mon data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/data/$name&lt;/span&gt;
&lt;span class="k"&gt;[mon.0]&lt;/span&gt;
&lt;span class="na"&gt;mon addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;192.168.124.101&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;localceph&lt;/span&gt;

&lt;span class="k"&gt;[mds]&lt;/span&gt;
&lt;span class="na"&gt;keyring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/data/keyring.$name&lt;/span&gt;
&lt;span class="k"&gt;[mds.0]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;localceph&lt;/span&gt;

&lt;span class="k"&gt;[osd]&lt;/span&gt;
&lt;span class="na"&gt;osd data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/data/$name&lt;/span&gt;
&lt;span class="na"&gt;osd journal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/data/$name/journal&lt;/span&gt;
&lt;span class="na"&gt;osd journal size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1000&lt;/span&gt;
&lt;span class="k"&gt;[osd.0]&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;localceph&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ceph setup steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloned an existing F20 VM I had kicking around, using virt-manager's clone wizard. I called it f20-ceph.&lt;/li&gt;
&lt;li&gt;In the VM, disable firewalld and set selinux to permissive. Not strictly required but I wanted to make this as simple as possible.&lt;/li&gt;
&lt;li&gt;Setup the ceph server:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yum install ceph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I needed to set a hostname for my VM, ceph won't accept 'localhost': &lt;code&gt;hostnamectl set-hostname localceph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir -p /data/mon.0 /data/osd.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overwrite /etc/ceph/ceph.conf with the content listed above.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkcephfs -a -c /etc/ceph/ceph.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service ceph start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Prove it works from my host with: &lt;code&gt;sudo mount -t ceph $VM_IPADDRESS:/ /mnt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add some storage for testing:&lt;ul&gt;
&lt;li&gt;Libvirt only connects to Ceph's block device interface, RBD. The above mount example is &lt;em&gt;not&lt;/em&gt; what libvirt will see, it just proves we can talk to the server.&lt;/li&gt;
&lt;li&gt;Import files within the VM like: &lt;code&gt;rbd import $filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List files with: &lt;code&gt;rbd list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notable here is that no ceph auth is used. Libvirt supports ceph auth but at this stage I didn't want to deal with it for testing. This setup doesn't match what a real deployment would ever look like.&lt;/p&gt;
&lt;p&gt;Here's the pool definition I passed to &lt;code&gt;virsh pool-define&lt;/code&gt; on my host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;pool&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;rbd&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;f20-ceph&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;host&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;$VM_IPADDRESS&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;rbd&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pool&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Setting up a minimal gluster server for libvirt testing</title><link href="https://crobinso.github.io/2014/12/setting-up-minimal-gluster-server-for.html" rel="alternate"></link><published>2014-12-11T17:56:00-05:00</published><updated>2014-12-11T17:56:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-12-11:/2014/12/setting-up-minimal-gluster-server-for.html</id><summary type="html">&lt;p&gt;Recently I've been working on virt-install/virt-manager support for libvirt network storage pools like &lt;a href="https://libvirt.org/storage.html#StorageBackendGluster"&gt;gluster&lt;/a&gt; and &lt;a href="https://libvirt.org/storage.html#StorageBackendRBD"&gt;rbd/ceph&lt;/a&gt;. For testing I set up a single node minimal gluster server in an F21 VM. I mostly followed the &lt;a href="http://www.gluster.org/community/documentation/index.php/QuickStart"&gt;gluster quickstart&lt;/a&gt; and hit only a few minor hiccups.&lt;/p&gt;
&lt;p&gt;Steps for the gluster …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I've been working on virt-install/virt-manager support for libvirt network storage pools like &lt;a href="https://libvirt.org/storage.html#StorageBackendGluster"&gt;gluster&lt;/a&gt; and &lt;a href="https://libvirt.org/storage.html#StorageBackendRBD"&gt;rbd/ceph&lt;/a&gt;. For testing I set up a single node minimal gluster server in an F21 VM. I mostly followed the &lt;a href="http://www.gluster.org/community/documentation/index.php/QuickStart"&gt;gluster quickstart&lt;/a&gt; and hit only a few minor hiccups.&lt;/p&gt;
&lt;p&gt;Steps for the gluster setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloned an existing F21 VM I had kicking around, using virt-manager's clone wizard. I called it f21-gluster.&lt;/li&gt;
&lt;li&gt;In the VM, disable firewalld and set selinux to permissive. Not strictly required but I wanted to make this as simple as possible.&lt;/li&gt;
&lt;li&gt;Setup the gluster server&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yum install glusterfs-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit /etc/glusterfs/glusterd.vol, add: &lt;code&gt;option rpc-auth-allow-insecure on&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;systemctl start glusterd; systemctl enable glusterd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create the volume:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir -p /data/brick1/gv0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gluster volume create gv0 $VM_IPADDRESS:/data/brick1/gv0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gluster volume start gv0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gluster volume set gv0 allow-insecure on&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;From my host machine, I verified things were working: &lt;code&gt;sudo mount -t glusterfs $VM_IPADDRESS:/gv0 /mnt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I added a couple example files to the directory: a stub qcow2 file, and a boot.iso.&lt;/li&gt;
&lt;li&gt;Verified that qemu can access the ISO: &lt;code&gt;qemu-system-x86_64 -cdrom gluster://$VM_IPADDRESS/gv0/boot.iso&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once I had a working setup, I used virt-manager to create a snapshot of the running VM config. So anytime I want to test gluster, I just start the VM snapshot and I know things are all nicely setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bits about 'allow-insecure' is so that an unprivileged client can access the gluster share, see &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1171436"&gt;this bug&lt;/a&gt; for more info. The gluster docs also have a &lt;a href="http://www.gluster.org/community/documentation/index.php/Libgfapi_with_qemu_libvirt#Tuning_glusterfsd_to_accept_requests_from_QEMU"&gt;section about it&lt;/a&gt; but the steps don't appear to be complete.&lt;/p&gt;
&lt;p&gt;The final bit is setting up a storage pool with libvirt. The XML I passed to &lt;code&gt;virsh pool-define&lt;/code&gt; on my host looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;pool&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;gluster&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;f21-gluster&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;host&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;$VM_IPADDRESS&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dir&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;gv0&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pool&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>qemu-2.2.0 in rawhide, virt-preview disabled for F20</title><link href="https://crobinso.github.io/2014/12/qemu-220-in-rawhide-virt-preview.html" rel="alternate"></link><published>2014-12-10T15:04:00-05:00</published><updated>2014-12-10T15:04:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-12-10:/2014/12/qemu-220-in-rawhide-virt-preview.html</id><summary type="html">&lt;p&gt;qemu-2.2.0 was released yesterday, check the &lt;a href="https://lists.gnu.org/archive/html/qemu-devel/2014-12/msg01111.html"&gt;release announcement&lt;/a&gt; and &lt;a href="http://wiki.qemu.org/ChangeLog/2.2"&gt;fine grained changelog&lt;/a&gt;. Packages are available in rawhide and &lt;a href="http://fedoraproject.org/wiki/Virtualization_Preview_Repository"&gt;fedora-virt-preview&lt;/a&gt; for Fedora 21.&lt;/p&gt;
&lt;p&gt;But now that Fedora 21 is out, there won't be any new builds for F20 virt-preview. If you want to play with the latest and greatest …&lt;/p&gt;</summary><content type="html">&lt;p&gt;qemu-2.2.0 was released yesterday, check the &lt;a href="https://lists.gnu.org/archive/html/qemu-devel/2014-12/msg01111.html"&gt;release announcement&lt;/a&gt; and &lt;a href="http://wiki.qemu.org/ChangeLog/2.2"&gt;fine grained changelog&lt;/a&gt;. Packages are available in rawhide and &lt;a href="http://fedoraproject.org/wiki/Virtualization_Preview_Repository"&gt;fedora-virt-preview&lt;/a&gt; for Fedora 21.&lt;/p&gt;
&lt;p&gt;But now that Fedora 21 is out, there won't be any new builds for F20 virt-preview. If you want to play with the latest and greatest virt bits, you'll need to update to F21.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager 1.0 creates qcow2 images that don't work on RHEL6</title><link href="https://crobinso.github.io/2014/12/virt-manager-10-creates-qcow2-images.html" rel="alternate"></link><published>2014-12-05T09:09:00-05:00</published><updated>2014-12-05T09:09:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-12-05:/2014/12/virt-manager-10-creates-qcow2-images.html</id><summary type="html">&lt;p&gt;One of the big features we added in virt-manager 1.0 was &lt;a href="http://blog.wikichoon.com/2014/03/snapshot-support-in-virt-manager.html"&gt;snapshot support&lt;/a&gt;. As part of this change, we switched to using the QCOW2 disk image format for new VMs. We also enable the &lt;a href="https://lists.gnu.org/archive/html/qemu-devel/2012-06/msg03827.html"&gt;QCOW2 lazy_refcounts&lt;/a&gt; feature that improves performance of some snapshot operations.&lt;/p&gt;
&lt;p&gt;However, not all versions of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the big features we added in virt-manager 1.0 was &lt;a href="http://blog.wikichoon.com/2014/03/snapshot-support-in-virt-manager.html"&gt;snapshot support&lt;/a&gt;. As part of this change, we switched to using the QCOW2 disk image format for new VMs. We also enable the &lt;a href="https://lists.gnu.org/archive/html/qemu-devel/2012-06/msg03827.html"&gt;QCOW2 lazy_refcounts&lt;/a&gt; feature that improves performance of some snapshot operations.&lt;/p&gt;
&lt;p&gt;However, not all versions of QEMU in the wild can handle lazy_refcounts, and will refuse to use the disk image, particularly RHEL6 QEMU. So by default, a disk image from a VM created with Fedora 20 virt-manager will not run on RHEL6 QEMU, throwing an error like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... uses a qcow2 feature which is not supported by this qemu version: QCOW version 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This has generated some &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1119929"&gt;user&lt;/a&gt; &lt;a href="https://lists.fedoraproject.org/pipermail/virt/2014-April/004040.html"&gt;confusion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The 'QCOW version 3' is a bit misleading here: while indeed using lazy_refcounts sets a bit in the QCOW2 file header calling it QCOW3, qemu-img and libvirt still call it QCOW2, but with a different 'compat' setting.&lt;/p&gt;
&lt;p&gt;Kevin Wolf, one of the QEMU block maintainers, explains it in &lt;a href="https://lists.fedoraproject.org/pipermail/virt/2014-April/004041.html"&gt;this mail&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;qemu versions starting with 1.1 can use lazy_refcounts which require an incompatible on-disk format. Between version 1.1 and 1.6, they needed to be specified explicitly during image creation, like this:&lt;/p&gt;
&lt;p&gt;qemu-img create -f qcow2 -o compat=1.1 test.qcow2 8G&lt;/p&gt;
&lt;p&gt;Starting with qemu 1.7, compat=1.1 became the default, so that newly created images can't be read by older qemu versions by default. If you need to read them in older version, you now need to be explicit about using the old format:&lt;/p&gt;
&lt;p&gt;qemu-img create -f qcow2 -o compat=0.10 test.qcow2 8G&lt;/p&gt;
&lt;p&gt;With the same release, qemu 1.7, a new qemu-img subcommand was introduced that allows converting between both versions, so you can downgrade your existing v3 image to the format known by RHEL 6 like this&lt;/p&gt;
&lt;p&gt;qemu-img amend -f qcow2 -o compat=0.10 test.qcow2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As explained, qemu-img with QEMU 1.7+ also defaults to lazy_refcounts/compat=1.1, but also provides a 'qemu-img amend' tool to easily convert between the two formats.&lt;/p&gt;
&lt;p&gt;Unfortunately that command is not available on Fedora 20 and older, however you can use the pre-existing 'qemu-img convert' command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;qemu-img convert -f qcow2 -O qcow2 -o compat=0.10 $ORIGPATH $NEWPATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Beware though, converting between two qcow2 images will drop all internal snapshots in the new image, so only use that option if you don't need to preserve any snapshot data. 'qemu-img amend' [will]{.underline} preserve snapshot data.&lt;/p&gt;
&lt;p&gt;(Unfortunately at this time virt-manager doesn't provide any way in the UI to _not_ use lazy_refcounts, but you could always use qemu-img/virsh to create a disk image outside of virt-manager, and select it when creating a new VM.)&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>x2apic on by default with qemu 2.0+, and some history</title><link href="https://crobinso.github.io/2014/11/x2apic-on-by-default-with-qemu-20-and.html" rel="alternate"></link><published>2014-11-28T14:37:00-05:00</published><updated>2014-11-28T14:37:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-11-28:/2014/11/x2apic-on-by-default-with-qemu-20-and.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/X2APIC"&gt;x2apic&lt;/a&gt; is a performance and scalability feature available in many modern Intel CPUs. Though regardless of whether your host CPU supports it, KVM can unconditionally emulate it for x86 guests, giving an easy performance win with no downside. This feature has existed since 2009 and been a regular recommendation for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/X2APIC"&gt;x2apic&lt;/a&gt; is a performance and scalability feature available in many modern Intel CPUs. Though regardless of whether your host CPU supports it, KVM can unconditionally emulate it for x86 guests, giving an easy performance win with no downside. This feature has existed since 2009 and been a regular recommendation for &lt;a href="http://www.linux-kvm.org/page/Tuning_KVM"&gt;tuning a KVM VM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As of qemu 2.0.0 x2apic is enabled automatically (more details at the end).
Priot to that, actually benefiting from x2apic required a tool like virt-manager to explicitly enable the flag, which has had a long bumpy road.&lt;/p&gt;
&lt;p&gt;x2apic is exposed on the qemu command line as a CPU feature, like: &lt;code&gt;qemu -cpu $MODEL,+x2apic ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And there isn't any way to specify a feature flag without specifying the CPU model. So enabling x2apic required hardcoding a CPU model where traditionally tools (and libvirt) deferred to qemu's default.&lt;/p&gt;
&lt;p&gt;A Fedora 13 &lt;a href="https://fedoraproject.org/wiki/Features/Virtx2apic"&gt;feature page&lt;/a&gt; was created to track the change, and we &lt;a href="http://pkgs.fedoraproject.org/cgit/python-virtinst.git/commit/?id=7a684cb65d69f2b116809456bed99ed32ca44080"&gt;enabled it in python-virtinst&lt;/a&gt; for f13/rawhide. The implementation attempted to hardcode the CPU model name that libvirt detected for the host machine, which unfortunately has some problems as I explained in a &lt;a href="http://blog.wikichoon.com/2014/03/virt-manager-improved-cpu-model-default.html"&gt;previous post&lt;/a&gt;. This led to some &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=611584"&gt;issues&lt;/a&gt; installing 64bit guests, and after trying to hack around it, I gave up and reverted the change.&lt;/p&gt;
&lt;p&gt;(In retrospect, we likely could have made it work by just trying to duplicate the default CPU model logic that qemu uses, however that might have hit issues if the CPU default ever changed, like on RHEL for example.)&lt;/p&gt;
&lt;p&gt;Later on virt-manager and virt-install gained UI for enabling x2apic, but a user had to know what they were doing and hunt it down.&lt;/p&gt;
&lt;p&gt;As mentioned above, as of qemu 2.0.0 any x86 KVM VM will have x2apic automatically enabled, so there's no explicit need to opt in. From qemu.git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;commit ef02ef5f4536dba090b12360a6c862ef0e57e3bc
Author: Eduardo Habkost &amp;lt;ehabkost redhat.com&amp;gt;
Date:   Wed Feb 19 11:58:12 2014 -0300

    target-i386: Enable x2apic by default on KVM
&lt;/pre&gt;&lt;/div&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Updated instructions for using QEMU, UEFI, and Secureboot</title><link href="https://crobinso.github.io/2014/11/updated-instructions-for-using-qemu.html" rel="alternate"></link><published>2014-11-23T17:15:00-05:00</published><updated>2014-11-23T17:15:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-11-23:/2014/11/updated-instructions-for-using-qemu.html</id><summary type="html">&lt;p&gt;Last year I started a wiki page about testing &lt;a href="http://fedoraproject.org/wiki/Secureboot"&gt;Fedora's Secureboot support&lt;/a&gt; with KVM. Just now I've cleaned up the page and modernized it for the current state of virt packages in F21:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU"&gt;https://fedoraproject.org/wiki/Using_UEFI_with_QEMU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Secureboot steps are now at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU#Testing_Secureboot_in_a_VM"&gt;https://fedoraproject.org/wiki/Using_UEFI_with_QEMU#Testing_Secureboot_in_a_VM …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last year I started a wiki page about testing &lt;a href="http://fedoraproject.org/wiki/Secureboot"&gt;Fedora's Secureboot support&lt;/a&gt; with KVM. Just now I've cleaned up the page and modernized it for the current state of virt packages in F21:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU"&gt;https://fedoraproject.org/wiki/Using_UEFI_with_QEMU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Secureboot steps are now at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU#Testing_Secureboot_in_a_VM"&gt;https://fedoraproject.org/wiki/Using_UEFI_with_QEMU#Testing_Secureboot_in_a_VM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main change is that nowadays the virt tools know how to create persistent configuration storage for UEFI, so you can setup Secureboot once. Previously you had to do all sorts of crazy things to turn on Secureboot for each restart of the VM.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Running F21 aarch64 with QEMU, libvirt, and UEFI</title><link href="https://crobinso.github.io/2014/11/running-f21-aarch64-with-qemu-libvirt.html" rel="alternate"></link><published>2014-11-21T15:36:00-05:00</published><updated>2014-11-21T15:36:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-11-21:/2014/11/running-f21-aarch64-with-qemu-libvirt.html</id><summary type="html">&lt;p&gt;I just wrote up a wiki page describing how to run F21 aarch64 bits with QEMU, libvirt, and UEFI:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Architectures/AArch64/Install_with_QEMU"&gt;https://fedoraproject.org/wiki/Architectures/AArch64/Install_with_QEMU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was tested on x86 but the same steps should work if running on real aarch64 HW.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just wrote up a wiki page describing how to run F21 aarch64 bits with QEMU, libvirt, and UEFI:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Architectures/AArch64/Install_with_QEMU"&gt;https://fedoraproject.org/wiki/Architectures/AArch64/Install_with_QEMU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was tested on x86 but the same steps should work if running on real aarch64 HW.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Run linaro aarch64 images with f21 virt-install + libvirt</title><link href="https://crobinso.github.io/2014/11/run-linaro-aarch64-images-with-f21-virt.html" rel="alternate"></link><published>2014-11-19T12:25:00-05:00</published><updated>2014-11-19T12:25:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-11-19:/2014/11/run-linaro-aarch64-images-with-f21-virt.html</id><summary type="html">&lt;p&gt;Linaro generates some minimal openembedded based aarch64 disk images, which are useful for virt testing. There's simple instructions &lt;a href="http://suihkulokki.blogspot.com/2014/08/booting-linaro-armv8-oe-images-with-qemu.html"&gt;over here&lt;/a&gt; for running them with qemu on an x86 host. But with Fedora 21 packages, you can also these images with virt-install + libvirt + qemu.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grab the disk image, I used this …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Linaro generates some minimal openembedded based aarch64 disk images, which are useful for virt testing. There's simple instructions &lt;a href="http://suihkulokki.blogspot.com/2014/08/booting-linaro-armv8-oe-images-with-qemu.html"&gt;over here&lt;/a&gt; for running them with qemu on an x86 host. But with Fedora 21 packages, you can also these images with virt-install + libvirt + qemu.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grab the disk image, I used this one: &lt;a href="http://releases.linaro.org/14.10/openembedded/aarch64/vexpress64-openembedded_minimal-armv8-gcc-4.9_20141023-693.img.gz"&gt;http://releases.linaro.org/14.10/openembedded/aarch64/vexpress64-openembedded_minimal-armv8-gcc-4.9_20141023-693.img.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Grab the associated boot bits: &lt;a href="http://releases.linaro.org/14.10/openembedded/aarch64/Image"&gt;http://releases.linaro.org/14.10/openembedded/aarch64/Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Extract the disk image: &lt;code&gt;unar vexpress64-openembedded_minimal-armv8-gcc-4.9_20141023-693.img.gz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, import it with virt-install. The command and output are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo virt-install
     --name linaro-aarch64 --ram &lt;span class="m"&gt;1024&lt;/span&gt;
     --arch aarch64 --cpu cortex-a57
     --disk vexpress64-openembedded_minimal-armv8-gcc-4.9_20141023-693.img
     --boot &lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;virt,kernel&lt;span class="o"&gt;=&lt;/span&gt;Image,kernel_args&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root=/dev/vda2 rw rootwait mem=1024M console=ttyAMA0,38400n8&amp;quot;&lt;/span&gt;

Starting install...
Creating domain...                                     &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt; B  &lt;span class="m"&gt;00&lt;/span&gt;:00   
Connected to domain linaro-aarch64
Escape character is ^&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000000&lt;span class="o"&gt;]&lt;/span&gt; Linux version &lt;span class="m"&gt;3&lt;/span&gt;.17.0-1-linaro-vexpress64 &lt;span class="o"&gt;(&lt;/span&gt;buildslave@x86-64-07&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;gcc version &lt;span class="m"&gt;4&lt;/span&gt;.8.3 &lt;span class="m"&gt;20140401&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;prerelease&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;crosstool-NG linaro-1.13.1-4.8-2014.04 - Linaro GCC &lt;span class="m"&gt;4&lt;/span&gt;.8-2014.04&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#1ubuntu1~ci+141022120835 SMP PREEMPT Wed Oct 22 12:09:19 UTC 20&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000000&lt;span class="o"&gt;]&lt;/span&gt; CPU: AArch64 Processor &lt;span class="o"&gt;[&lt;/span&gt;411fd070&lt;span class="o"&gt;]&lt;/span&gt; revision &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000000&lt;span class="o"&gt;]&lt;/span&gt; Detected PIPT I-cache on CPU0
&lt;span class="o"&gt;[&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.000000&lt;span class="o"&gt;]&lt;/span&gt; Memory limited to 1024MB
...
Last login: Wed Nov &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:16:22 UTC &lt;span class="m"&gt;2014&lt;/span&gt; on tty1
root@genericarmv8:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Maybe you're wondering, what about fedora images? They are a bit different, since they expect to run with UEFI. I'll blog about that soon once I finish some testing)&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Booting Fedora 21 ARM with QEMU and U-Boot</title><link href="https://crobinso.github.io/2014/11/booting-fedora-21-arm-with-qemu-and-u.html" rel="alternate"></link><published>2014-11-18T15:32:00-05:00</published><updated>2014-11-18T15:32:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-11-18:/2014/11/booting-fedora-21-arm-with-qemu-and-u.html</id><summary type="html">&lt;p&gt;Running &lt;a href="https://fedoraproject.org/wiki/Architectures/ARM/F21/Installation#For_Versatile_Express_Emulation_with_QEMU"&gt;Fedora ARM with qemu&lt;/a&gt; is a bit of a pain because you need to pull the kernel and initrd out of the disk image and manually pass them to qemu; you can't just point qemu at the disk image and expect it to boot. The latter is how x86 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Running &lt;a href="https://fedoraproject.org/wiki/Architectures/ARM/F21/Installation#For_Versatile_Express_Emulation_with_QEMU"&gt;Fedora ARM with qemu&lt;/a&gt; is a bit of a pain because you need to pull the kernel and initrd out of the disk image and manually pass them to qemu; you can't just point qemu at the disk image and expect it to boot. The latter is how x86 qemu handles it (via a bundles seabios build).&lt;/p&gt;
&lt;p&gt;On physical arm hardware, the bit that typically handles fetching the kernel/initrd from disk is U-Boot. However there are no U-Boot builds shipped with qemu for us to take advantage of.&lt;/p&gt;
&lt;p&gt;Well that's changed a bit now. I was talking to &lt;a href="https://www.kraxel.org/"&gt;Gerd&lt;/a&gt; about this at KVM Forum last month, and after some tinkering he got a working U-Boot build for the Versatile Express board that qemu emulates.&lt;/p&gt;
&lt;p&gt;Steps to use it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grab a Fedora 21 ARM image (I used the F21 beta 'Minimal' image from &lt;a href="https://dl.fedoraproject.org/pub/fedora/linux/releases/test/21-Beta/Images/armhfp/"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enable Gerd's upstream &lt;a href="https://www.kraxel.org/repos/"&gt;firmware repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;u-boot.git-arm&lt;/code&gt; (this just installs some binaries in /usr/share, doesn't mess with any host boot config)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use it with libvirt, you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo virt-install --name f21-arm-a9-uboot
 --ram &lt;span class="m"&gt;512&lt;/span&gt;
 --arch armv7l --machine vexpress-a9
 --os-variant fedora21
 --boot &lt;span class="nv"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/share/u-boot.git/arm/vexpress-a9/u-boot
 --disk Fedora-Minimal-armhfp-21_Beta-1-sda.raw
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For straight QEMU, you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;qemu-system-arm -machine vexpress-a9
  -m 512
 -nographic
 -kernel /usr/share/u-boot.git/arm/vexpress-a9/u-boot
 -sd Fedora-Minimal-armhfp-21_Beta-1-sda.raw
&lt;/pre&gt;&lt;/div&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Fedora 21 Virt Test Day is Thu Sep 25!</title><link href="https://crobinso.github.io/2014/09/fedora-21-virt-test-day-is-thu-sep-25.html" rel="alternate"></link><published>2014-09-22T20:01:00-04:00</published><updated>2014-09-22T20:01:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-09-22:/2014/09/fedora-21-virt-test-day-is-thu-sep-25.html</id><summary type="html">&lt;p&gt;The Fedora 21 Virt Test Day is this coming Thu Sep 25. Check out the test day landing page:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're interested in trying out some new virt functionality, there's step by step instructions for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q35 Chipset&lt;/li&gt;
&lt;li&gt;Import AArch64 image as a VM on …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The Fedora 21 Virt Test Day is this coming Thu Sep 25. Check out the test day landing page:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're interested in trying out some new virt functionality, there's step by step instructions for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q35 Chipset&lt;/li&gt;
&lt;li&gt;Import AArch64 image as a VM on x86&lt;/li&gt;
&lt;li&gt;Install VM using OVMF/UEFI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if you aren't interested in testing new features, we still need you! The test day is the perfect time to make sure your virt workflow is working fine on Fedora 21, as there will be several developers on hand to answer any questions, help with debugging, provide patches, etc. No requirement to run through test cases on the wiki, just show up and let us know what works (or breaks).&lt;/p&gt;
&lt;p&gt;And to be clear, while it is preferred that you have a physical machine running Fedora 21, participating in the test day does NOT require it: you can test the latest virt bits on the latest Fedora release courtesy of the virt-preview repo. For more details, as well as easy instructions on updating to Fedora 21, see:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization#What.27s_needed_to_test"&gt;https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization#What.27s_needed_to_test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you can't make the date of the test day, adding test case results to the wiki anytime next week is fine as well. Though if you do plan on showing up to the test day, add your name to the participant list on the wiki, and when the day arrives, pop into #fedora-test-day on freenode and give us a shout!&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager 1.1.0 released!</title><link href="https://crobinso.github.io/2014/09/virt-manager-110-released.html" rel="alternate"></link><published>2014-09-07T17:25:00-04:00</published><updated>2014-09-07T17:25:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-09-07:/2014/09/virt-manager-110-released.html</id><summary type="html">&lt;p&gt;virt-manager 1.1.0 is released! ... and should show up in F21 and rawhide shortly.&lt;/p&gt;
&lt;p&gt;This release includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to libosinfo as OS metadata database (Giuseppe Scrivano)&lt;/li&gt;
&lt;li&gt;Use libosinfo for OS detection from CDROM media labels (Giuseppe Scrivano)&lt;/li&gt;
&lt;li&gt;Use libosinfo for improved OS defaults, like recommended disk size (Giuseppe Scrivano …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;virt-manager 1.1.0 is released! ... and should show up in F21 and rawhide shortly.&lt;/p&gt;
&lt;p&gt;This release includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to libosinfo as OS metadata database (Giuseppe Scrivano)&lt;/li&gt;
&lt;li&gt;Use libosinfo for OS detection from CDROM media labels (Giuseppe Scrivano)&lt;/li&gt;
&lt;li&gt;Use libosinfo for improved OS defaults, like recommended disk size (Giuseppe Scrivano)&lt;/li&gt;
&lt;li&gt;virt-image tool has been removed, as &lt;a href="http://blog.wikichoon.com/2014/04/deprecating-little-used-tool-virt-image1.html"&gt;previously announced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.wikichoon.com/2014/07/enabling-hyper-v-enlightenments-with-kvm.html"&gt;Enable Hyper-V enlightenments for Windows VMs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Revert virtio-console default, back to plain serial console&lt;/li&gt;
&lt;li&gt;Experimental q35 option in new VM 'customize' dialog&lt;/li&gt;
&lt;li&gt;UI for virtual network QoS settings (Giuseppe Scrivano)&lt;/li&gt;
&lt;li&gt;virt-install: --disk discard= support (Jim Minter)&lt;/li&gt;
&lt;li&gt;addhardware: Add spiceport UI (Marc-André Lureau)&lt;/li&gt;
&lt;li&gt;virt-install: --events on_poweroff etc. support (Chen Hanxiao)&lt;/li&gt;
&lt;li&gt;cli --network portgroup= support and UI support&lt;/li&gt;
&lt;li&gt;cli --boot initargs= and UI support&lt;/li&gt;
&lt;li&gt;addhardware: allow setting controller model (Chen Hanxiao)&lt;/li&gt;
&lt;li&gt;virt-install: support setting hugepage options (Chen Hanxiao)&lt;/li&gt;
&lt;/ul&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Fedora 21 virt test day moved yet again, now Thursday September 25</title><link href="https://crobinso.github.io/2014/09/fedora-21-virt-test-day-moved-yet-again.html" rel="alternate"></link><published>2014-09-05T11:01:00-04:00</published><updated>2014-09-05T11:01:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-09-05:/2014/09/fedora-21-virt-test-day-moved-yet-again.html</id><summary type="html">&lt;p&gt;Third times the charm! With the ongoing &lt;a href="https://lists.fedoraproject.org/pipermail/devel/2014-September/202100.html"&gt;F21 alpha delay&lt;/a&gt;, I requested the virt test day to be pushed back yet again. Now it's on Thursday September 25th. Check out the landing page for more info on the test day:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since I'm tired of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Third times the charm! With the ongoing &lt;a href="https://lists.fedoraproject.org/pipermail/devel/2014-September/202100.html"&gt;F21 alpha delay&lt;/a&gt;, I requested the virt test day to be pushed back yet again. Now it's on Thursday September 25th. Check out the landing page for more info on the test day:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-09-25_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since I'm tired of making these announcements, even if F21 is delayed some more I won't be rescheduling the test day again, so September 25th is the &lt;em&gt;super official&lt;/em&gt; date. :)&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Fedora 21 virt test day moved one day to September 11</title><link href="https://crobinso.github.io/2014/08/fedora-21-virt-test-day-moved-one-day.html" rel="alternate"></link><published>2014-08-19T12:25:00-04:00</published><updated>2014-08-19T12:25:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-08-19:/2014/08/fedora-21-virt-test-day-moved-one-day.html</id><summary type="html">&lt;p&gt;To avoid two back to back test days, we've moved the Fedora 21 virt test day to September 11th. Landing page is now here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-09-11_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-09-11_Virtualization&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;To avoid two back to back test days, we've moved the Fedora 21 virt test day to September 11th. Landing page is now here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-09-11_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-09-11_Virtualization&lt;/a&gt;&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Speaking at Flock 2014</title><link href="https://crobinso.github.io/2014/08/speaking-at-flock-2014.html" rel="alternate"></link><published>2014-08-06T07:22:00-04:00</published><updated>2014-08-06T07:22:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-08-06:/2014/08/speaking-at-flock-2014.html</id><summary type="html">&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-NPN595IPgtM/U-INh3XBquI/AAAAAAAAAFM/mBaF1lvSjxA/s1600/flock-2014-speaker.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-NPN595IPgtM/U-INh3XBquI/AAAAAAAAAFM/mBaF1lvSjxA/s1600/flock-2014-speaker.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm in Prague for &lt;a href="http://flocktofedora.org/"&gt;Fedora Flock 2014&lt;/a&gt;. I'll be giving a talk on Saturday at 11am titled 'Virtualization for Fedora Packagers and Developers'. The talk will explain some intermediate virt tips and tricks to simplify certain common Fedora developer tasks like testing packages across Fedora versions, reproducing reported bugs, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-NPN595IPgtM/U-INh3XBquI/AAAAAAAAAFM/mBaF1lvSjxA/s1600/flock-2014-speaker.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-NPN595IPgtM/U-INh3XBquI/AAAAAAAAAFM/mBaF1lvSjxA/s1600/flock-2014-speaker.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm in Prague for &lt;a href="http://flocktofedora.org/"&gt;Fedora Flock 2014&lt;/a&gt;. I'll be giving a talk on Saturday at 11am titled 'Virtualization for Fedora Packagers and Developers'. The talk will explain some intermediate virt tips and tricks to simplify certain common Fedora developer tasks like testing packages across Fedora versions, reproducing reported bugs, and others.&lt;/p&gt;
&lt;p&gt;If you see me at Flock, feel free to ask me anything virt related!&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Fedora 21 virt test day rescheduled to September 10th</title><link href="https://crobinso.github.io/2014/07/fedora-21-virt-test-day-rescheduled-to.html" rel="alternate"></link><published>2014-07-30T16:50:00-04:00</published><updated>2014-07-30T16:50:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-07-30:/2014/07/fedora-21-virt-test-day-rescheduled-to.html</id><summary type="html">&lt;p&gt;Due to Fedora 21 slipping 3 weeks, the virt test day has been rescheduled to September 10th. Landing page is now here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-09-10_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-09-10_Virtualization&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Due to Fedora 21 slipping 3 weeks, the virt test day has been rescheduled to September 10th. Landing page is now here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-09-10_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-09-10_Virtualization&lt;/a&gt;&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-install: create disk image without an explicit path</title><link href="https://crobinso.github.io/2014/07/virt-install-create-disk-image-without.html" rel="alternate"></link><published>2014-07-27T16:19:00-04:00</published><updated>2014-07-27T16:19:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-07-27:/2014/07/virt-install-create-disk-image-without.html</id><summary type="html">&lt;p&gt;For most of its life, virt-install has required specifying an explicit disk path when creating storage, like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virt-install --disk /path/to/my/new/disk.img,size=10 ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However there's a shortcut since version 1.0.0, just specify the size:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virt-install --disk size=10 ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;virt-install will create a disk image …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For most of its life, virt-install has required specifying an explicit disk path when creating storage, like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virt-install --disk /path/to/my/new/disk.img,size=10 ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However there's a shortcut since version 1.0.0, just specify the size:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virt-install --disk size=10 ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;virt-install will create a disk image in the &lt;a href="http://blog.wikichoon.com/2014/07/virt-manager-changing-default-storage.html"&gt;default pool&lt;/a&gt;, and name it based on the VM name and disk image format, typically $vmname.qcow2&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager: changing the default storage path and default virtual network</title><link href="https://crobinso.github.io/2014/07/virt-manager-changing-default-storage.html" rel="alternate"></link><published>2014-07-15T15:45:00-04:00</published><updated>2014-07-15T15:45:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-07-15:/2014/07/virt-manager-changing-default-storage.html</id><summary type="html">&lt;p&gt;When creating a new virtual machine via virt-manager or virt-install, the tools make some assumptions about the default location for disk images, and the default network source.&lt;/p&gt;
&lt;p&gt;For example, in the 'New VM' wizard, the storage page will offer to create a disk image in the default location:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-sYFmftbe-VA/U8V_KQ11FaI/AAAAAAAAAD0/gszjhOLZbAI/s1600/Screenshot+from+2014-07-15+15:20:56.png"&gt;&lt;img alt="" height="400" src="http://4.bp.blogspot.com/-sYFmftbe-VA/U8V_KQ11FaI/AAAAAAAAAD0/gszjhOLZbAI/s1600/Screenshot+from+2014-07-15+15:20:56.png" width="367"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The default …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When creating a new virtual machine via virt-manager or virt-install, the tools make some assumptions about the default location for disk images, and the default network source.&lt;/p&gt;
&lt;p&gt;For example, in the 'New VM' wizard, the storage page will offer to create a disk image in the default location:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-sYFmftbe-VA/U8V_KQ11FaI/AAAAAAAAAD0/gszjhOLZbAI/s1600/Screenshot+from+2014-07-15+15:20:56.png"&gt;&lt;img alt="" height="400" src="http://4.bp.blogspot.com/-sYFmftbe-VA/U8V_KQ11FaI/AAAAAAAAAD0/gszjhOLZbAI/s1600/Screenshot+from+2014-07-15+15:20:56.png" width="367"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The default location for most uses of virt-manager is /var/lib/libvirt/images, which is created by libvirt and has the expected selinux labelling and permission to run QEMU/KVM VMs.&lt;/p&gt;
&lt;p&gt;Behind the scenes, virt-manager is using a libvirt storage pool for creating disk images. When the 'New VM' wizard is first run, virt-manager looks for a storage pool named 'default'; if it doesn't find that it will create a storage pool named 'default' pointing to /var/lib/libvirt/images. It then uses that 'default' pool for the disk provisioning page.&lt;/p&gt;
&lt;p&gt;The default virtual network works similarly. The libvirt-daemon-config-network package will dynamically create a libvirt virtual network named 'default'. You can see the XML definition &lt;a href="http://libvirt.org/git/?p=libvirt.git;a=blob;f=src/network/default.xml;h=d7241d0c16271bb7598b5bc1bb90d8145183de50;hb=HEAD"&gt;over here&lt;/a&gt; in libvirt.git.&lt;/p&gt;
&lt;p&gt;When virt-manager reaches the last page of the 'New VM' wizard, if there's a virtual network named 'default', we automatically select it as the network source:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-RMEQe709QCg/U8WCpEKwFdI/AAAAAAAAAEA/qypJIW5YRwQ/s1600/Screenshot+from+2014-07-15+15:35:47.png"&gt;&lt;img alt="" height="400" src="http://3.bp.blogspot.com/-RMEQe709QCg/U8WCpEKwFdI/AAAAAAAAAEA/qypJIW5YRwQ/s1600/Screenshot+from+2014-07-15+15:35:47.png" width="285"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's also the network source used when no explicit network configuration is passed to virt-install.&lt;/p&gt;
&lt;p&gt;Every now and then someone asks how to make virt-manager/virt-install use a different storage pool or network as the default. As the above logic describes, just name the desired virtual network or storage pool 'default', and the tools will do the right thing.&lt;/p&gt;
&lt;p&gt;You can rename storage pools and virtual networks using virt-manager's UI from Edit-&gt;Connection Details. It only works on a stopped object though. Here's an example renaming a virtual network 'default' to 'new-name':&lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-bzrj04OTliw/U8WEC1PlGDI/AAAAAAAAAEM/ABU7QO-i7Tk/s1600/Screenshot+from+2014-07-15+15:41:33.png"&gt;&lt;img alt="" height="481" src="http://2.bp.blogspot.com/-bzrj04OTliw/U8WEC1PlGDI/AAAAAAAAAEM/ABU7QO-i7Tk/s1600/Screenshot+from+2014-07-15+15:41:33.png" width="640"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Enabling Hyper-V enlightenments with KVM</title><link href="https://crobinso.github.io/2014/07/enabling-hyper-v-enlightenments-with-kvm.html" rel="alternate"></link><published>2014-07-07T18:26:00-04:00</published><updated>2014-07-07T18:26:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-07-07:/2014/07/enabling-hyper-v-enlightenments-with-kvm.html</id><summary type="html">&lt;p&gt;Windows has support for several paravirt features that it will use when running on Hyper-V, Microsoft's hypervisor. These features are called enlightenments. Many of the features are similar to paravirt functionality that exists with Linux on KVM (virtio, kvmclock, PV EOI, etc.)&lt;/p&gt;
&lt;p&gt;Nowadays QEMU/KVM can also enable support for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Windows has support for several paravirt features that it will use when running on Hyper-V, Microsoft's hypervisor. These features are called enlightenments. Many of the features are similar to paravirt functionality that exists with Linux on KVM (virtio, kvmclock, PV EOI, etc.)&lt;/p&gt;
&lt;p&gt;Nowadays QEMU/KVM can also enable support for several Hyper-V enlightenments. When enabled, Windows VMs running on KVM will use many of the same paravirt optimizations they would use when running on Hyper-V. For detailed info, see &lt;a href="http://www.linux-kvm.org/wiki/images/0/0a/2012-forum-kvm_hyperv.pdf"&gt;Vadim's presentation&lt;/a&gt; from KVM Forum 2012.&lt;/p&gt;
&lt;p&gt;From the QEMU/KVM developers, the recommended configuration is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-cpu ...,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which maps to the libvirt XML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;features&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;hyperv&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;relaxed&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;on&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;vapic&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;on&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;spinlocks&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;on&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;retries=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;8191&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/hyperv&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;features/&amp;gt;&lt;/span&gt;

 &lt;span class="nt"&gt;&amp;lt;clock&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;timer&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hypervclock&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;present=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/clock&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some details about the individual features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;relaxed/hv_relaxed. Available in libvirt 1.0.0+ (&lt;a href="http://libvirt.org/git/?p=libvirt.git;a=commit;h=cc922fddc3fcbbcecce7e438a51045c2feacf767"&gt;commit&lt;/a&gt;) and qemu 1.1+ (&lt;a href="http://git.qemu.org/?p=qemu.git;a=commit;h=28f52cc04d341045e810bd487a478fa9ec5f40be"&gt;commit&lt;/a&gt;). This bit disables a Windows sanity check that commonly results in a BSOD when the VM is running on a heavily loaded host (example bugs &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1110305"&gt;here&lt;/a&gt;, &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=990824"&gt;here&lt;/a&gt;, and &lt;a href="https://bugs.launchpad.net/ubuntu/+source/qemu/+bug/1308341"&gt;here&lt;/a&gt;). Sounds similar to the Linux kernel option no_timer_check, which is automatically enabled when Linux is running on KVM.&lt;/li&gt;
&lt;li&gt;vapic/hv_vapic. Available in libvirt 1.1.0+ (&lt;a href="http://libvirt.org/git/?p=libvirt.git;a=commit;h=19f75d5eeb6bedd49597034832284146c7591a00"&gt;commit&lt;/a&gt;) and qemu 1.1+ (&lt;a href="http://git.qemu.org/?p=qemu.git;a=commit;h=28f52cc04d341045e810bd487a478fa9ec5f40be"&gt;commit&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;spinlocks/hv_spinlocks. Available in libvirt 1.1.0+ (&lt;a href="http://libvirt.org/git/?p=libvirt.git;a=commit;h=19f75d5eeb6bedd49597034832284146c7591a00"&gt;commit&lt;/a&gt;) and qemu 1.1+ (&lt;a href="http://git.qemu.org/?p=qemu.git;a=commit;h=28f52cc04d341045e810bd487a478fa9ec5f40be"&gt;commit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;hypervclock/hv_time. Available in libvirt 1.2.2+ (&lt;a href="http://libvirt.org/git/?p=libvirt.git;a=commit;h=600bca592b2352b683856f4b7f2694f366feac36"&gt;commit&lt;/a&gt;) and qemu 2.0+ (&lt;a href="http://git.qemu.org/?p=qemu.git;a=commit;h=48a5f3bcbbbe59a3120a39106bfda59fd1933fbc"&gt;commit&lt;/a&gt;). Sounds similar to &lt;a href="http://www.linux-kvm.org/page/KVMClock"&gt;kvmclock&lt;/a&gt;, a paravirt time source which is used when Linux is running on KVM.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should be safe to enable these bits for all Windows VM, though only Vista/Server 2008 and later will actually make use of the features.&lt;/p&gt;
&lt;p&gt;(In fact, Linux also has support for using these Hyper-V features, like the &lt;a href="http://lwn.net/Articles/342305/"&gt;paravirt device drivers&lt;/a&gt; and hyperv_clocksource. Though these are really only for running Linux on top of Hyper-V. With Linux on KVM, the natively developed paravirt extensions are understandably preferred).&lt;/p&gt;
&lt;p&gt;The next version of virt-manager will enable Hyper-V enlightenments when creating a Windows VM (&lt;a href="https://git.fedorahosted.org/cgit/virt-manager.git/commit/?id=8ea634f9e437153a30f06b7267db2bd685af0561"&gt;git commit&lt;/a&gt;). virt-xml can also be used to enable these bits easily from the command line for an existing VM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo virt-xml &lt;span class="nv"&gt;$VMNAME&lt;/span&gt; --edit --features &lt;span class="nv"&gt;hyperv_relaxed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on,hyperv_vapic&lt;span class="o"&gt;=&lt;/span&gt;on,hyperv_spinlocks&lt;span class="o"&gt;=&lt;/span&gt;on,hyperv_spinlocks_retries&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8191&lt;/span&gt;
$ sudo virt-xml &lt;span class="nv"&gt;$VMNAME&lt;/span&gt; --edit --clock &lt;span class="nv"&gt;hypervclock_present&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first invocation will work with virt-manager 1.0.1, the second invocation requires virt-manager.git. In my testing this didn't upset my existing Windows VMs and they worked fine after a reboot.&lt;/p&gt;
&lt;p&gt;Other tools aren't enabling these features yet, though there are bugs tracking this for the big ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ovirt/vdsm: &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1083529"&gt;https://bugzilla.redhat.com/show_bug.cgi?id=1083529&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;openstack: &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1083525"&gt;https://bugzilla.redhat.com/show_bug.cgi?id=1083525&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;gnome-boxes: &lt;a href="https://bugzilla.gnome.org/show_bug.cgi?id=732811"&gt;https://bugzilla.gnome.org/show_bug.cgi?id=732811&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(edit 2014-09-08: This change was released in &lt;a href="http://blog.wikichoon.com/2014/09/virt-manager-110-released.html"&gt;virt-manager-1.1.0&lt;/a&gt;)&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Fedora 21 Virt Test Day scheduled for August 20th 2014</title><link href="https://crobinso.github.io/2014/07/fedora-21-virt-test-day-scheduled-for.html" rel="alternate"></link><published>2014-07-05T20:40:00-04:00</published><updated>2014-07-05T20:40:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-07-05:/2014/07/fedora-21-virt-test-day-scheduled-for.html</id><summary type="html">&lt;p&gt;Just a quick note that the Fedora 21 Virt Test Day is scheduled for Wednesday, August 20th 2014. The inprogress landing page is at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-08-20_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-08-20_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So if you're interested in helping test new virt features, or you want to make sure that the stuff you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a quick note that the Fedora 21 Virt Test Day is scheduled for Wednesday, August 20th 2014. The inprogress landing page is at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fedoraproject.org/wiki/Test_Day:2014-08-20_Virtualization"&gt;https://fedoraproject.org/wiki/Test_Day:2014-08-20_Virtualization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So if you're interested in helping test new virt features, or you want to make sure that the stuff you care about isn't broken, please mark your calendars.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager 1.0: reduced polling and CPU usage</title><link href="https://crobinso.github.io/2014/05/virt-manager-10-reduced-polling-and-cpu.html" rel="alternate"></link><published>2014-05-13T10:00:00-04:00</published><updated>2014-05-13T10:00:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-05-13:/2014/05/virt-manager-10-reduced-polling-and-cpu.html</id><summary type="html">&lt;p&gt;A lot of work was done for &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; to reduce the amount of libvirt polling and API calls we make for common operations. Up until this point, virt-manager had to poll libvirt at regular intervals to update the domain list, domain status, and domain XML. By default we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A lot of work was done for &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; to reduce the amount of libvirt polling and API calls we make for common operations. Up until this point, virt-manager had to poll libvirt at regular intervals to update the domain list, domain status, and domain XML. By default we would poll once a second (configurable in the Preferences dialog).&lt;/p&gt;
&lt;p&gt;Although this burned far more CPU than necessary, things generally worked fine when talking to libvirtd on the local machine. However things really fell apart when connecting to a remote host with a lot of VMs, or over a high latency link: the polling would just saturate the connection and the app would be quite sluggish. Since the latter scenario is a pretty common setup for some of my remote colleagues at Red Hat, I heard about this quite a bit over the years :)&lt;/p&gt;
&lt;p&gt;One of the major hurdles to reducing needless polling was that virt-manager and virtinst were separate code bases, as I explained in a &lt;a href="http://blog.wikichoon.com/2014/05/a-not-so-brief-history-of-virtinst-and.html"&gt;previous post&lt;/a&gt;. For example, there is one routine in virtinst that will check if a new disk path is already in use by another VM: it does this by checking the path against the XML of every VM. Since virtinst was separate code, it had to do all this polling and XML fetching from scratch, despite the fact that we had this information cached in virt-manager. We could have taught virtinst about the virt-manager cache or some similar solution, but it was cumbersome to make changes like that while maintaining back compatibility with older virtinst users.&lt;/p&gt;
&lt;p&gt;Well, with virt-manager 0.10.0 we deprecated the public virtinst API and merged the code into virt-manager git. This allowed us to do a ton of code cleanup and simplification during the virt-manager 1.0 cycle to remove much of the API spamming.&lt;/p&gt;
&lt;p&gt;The other major piece we added in virt-manager 1.0 is use of asynchronous libvirt events. The initial events support in libvirt was &lt;a href="http://libvirt.org/git/?p=libvirt.git;a=commit;h=1509b8027fd0b73c30aeab443f81dd5a18d80544"&gt;added way back in October 2008&lt;/a&gt; by a couple folks from &lt;a href="http://en.wikipedia.org/wiki/Virtual_Iron"&gt;VirtualIron&lt;/a&gt;. That's quite a while ago, so supporting this in virt-manager was long overdue. Though waiting a long time had the nice side effect of letting other projects like oVirt shake all the bugs out of libvirt's event implementations :)&lt;/p&gt;
&lt;p&gt;Regardless, virt-manager 1.0 will use domain (and network) events now if connected to a sufficiently new version of libvirt and the driver supports it. We still maintain the old polling code for really old libvirt, and libvirt drivers that don't support the event APIs. Even on latest libvirt some polling is still needed since not all libvirt objects support event APIs, although now we poll on demand which reduces our CPU and network usage.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>A brief-ish history of virtinst and virt-install</title><link href="https://crobinso.github.io/2014/05/a-brief-ish-history-of-virtinst-and.html" rel="alternate"></link><published>2014-05-06T10:00:00-04:00</published><updated>2014-05-06T10:00:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-05-06:/2014/05/a-brief-ish-history-of-virtinst-and.html</id><summary type="html">&lt;p&gt;&lt;a href="http://linux.die.net/man/1/virt-install"&gt;virt-install&lt;/a&gt; is a command line tool for creating new virtual machines via libvirt. It's an important piece of the libvirt ecosystem that has shipped in RHEL5.0 and up, and over a dozen Fedora versions.&lt;/p&gt;
&lt;p&gt;It wasn't always called virt-install though: it started life as xenguest-install.py written by &lt;a href="http://velohacker.com/"&gt;Jeremy …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://linux.die.net/man/1/virt-install"&gt;virt-install&lt;/a&gt; is a command line tool for creating new virtual machines via libvirt. It's an important piece of the libvirt ecosystem that has shipped in RHEL5.0 and up, and over a dozen Fedora versions.&lt;/p&gt;
&lt;p&gt;It wasn't always called virt-install though: it started life as xenguest-install.py written by &lt;a href="http://velohacker.com/"&gt;Jeremy Katz&lt;/a&gt;. I think it was just an internal Red Hat only thing for a brief period, until it first surfaced as part of the Fedora 'xen' package in &lt;a href="http://pkgs.fedoraproject.org/cgit/xen.git/commit/?id=02687b4e3f7fa0db5de34280a2cb7e1a8eb8ff18"&gt;January 2006&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;commit 02687b4e3f7fa0db5de34280a2cb7e1a8eb8ff18
Author: Stephen Tweedie &amp;lt;sct@fedoraproject.org&amp;gt;
Date:  Tue Jan 31 16:59:19 2006 +0000

  Add xenguest-install.py in /usr/sbin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Strangely, the file isn't actually in git... I assume this is some accident of the CVS-&gt;git conversion. You can see the version shipped with Fedora Core 5 in the &lt;a href="https://archives.fedoraproject.org/pub/archive/fedora/linux/core/5/x86_64/os/Fedora/RPMS/xen-3.0.1-4.x86_64.rpm"&gt;archived RPM&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Check out the original set of arguments&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Options:
 -h, --help      show this help message and exit
 -n NAME, --name=NAME Name of the guest instance
 -f DISKFILE, --file=DISKFILE
            File to use as the disk image
 -s DISKSIZE, --file-size=DISKSIZE
            Size of the disk image (if it doesn&amp;#39;t exist) in
            gigabytes
 -r MEMORY, --ram=MEMORY
            Memory to allocate for guest instance in megabytes
 -m MAC, --mac=MAC   Fixed MAC address for the guest; if none is given a
            random address will be used
 -v, --hvm       This guest should be a fully virtualized guest
 -c CDROM, --cdrom=CDROM
            File to use a virtual CD-ROM device for fully
            virtualized guests
 -p, --paravirt    This guest should be a paravirtualized guest
 -l LOCATION, --location=LOCATION
            Installation source for paravirtualized guest (eg,
            nfs:host:/path, http://host/path, ftp://host/path)
 -x EXTRA, --extra-args=EXTRA
            Additional arguments to pass to the installer with
            paravirt guests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All those bits are still working with virt-install today, although many are are deprecated and hidden from the --help output by default.&lt;/p&gt;
&lt;p&gt;In early 2006, libvirt barely even existed, so the xenguest-install.py was generating &lt;a href="http://wiki.xen.org/wiki/Xen_Configuration_File_Options"&gt;xen xm&lt;/a&gt; config files (basically just raw python code) in /etc/xen.
Fedora CVS was the canonical home of the script.&lt;/p&gt;
&lt;p&gt;In March 2006, &lt;a href="http://berrange.com/"&gt;Dan Berrangé&lt;/a&gt; &lt;a href="https://git.fedorahosted.org/cgit/virt-manager.git/commit/?id=3ed0ef3"&gt;started work on virt-manager&lt;/a&gt;. It was very briefly called gnome-vm-manager, then settled into gnome-virt-manager until July 2006 when it was &lt;a href="https://git.fedorahosted.org/cgit/virt-manager.git/commit/?id=dc0d6db84cfe78c4a479381ead55bbd83c0cca55"&gt;renamed to virt-manager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In August 2006, xenguest-install moved to its own repo, &lt;a href="https://git.fedorahosted.org/cgit/python-virtinst.git/commit/?id=1e2e1aa0ca0b5ed8669be61aa4271a3e8c1d7333"&gt;python-xeninst&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;commit 1e2e1aa0ca0b5ed8669be61aa4271a3e8c1d7333
Author: Jeremy Katz &amp;lt;katzj@redhat.com&amp;gt;
Date:  Tue Aug 8 21:37:49 2006 -0400

  first pass at breaking up xenguest-install to have more of a usable API.
  currently only works for paravirt and some of the bits after the install
  gets started are still a little less than ideal
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much of logic was moved to a 'xeninst' module. There were some initial bits for generating libvirt XML, but the primary usage was still generating native xen configuration.&lt;/p&gt;
&lt;p&gt;(Both repositories were hosted in mercurial at hg.et.redhat.com for many years. We eventually &lt;a href="http://www.redhat.com/archives/virt-tools-list/2011-March/msg00056.html"&gt;transitioned to git in March 2011&lt;/a&gt;. Actually it's amazing it was only 3 years ago: I've pretty much entirely forgotten how to use mercurial despite using it for 4 years prior.)&lt;/p&gt;
&lt;p&gt;In October 2006, the project was &lt;a href="https://git.fedorahosted.org/cgit/python-virtinst.git/commit/?id=761ccd8a65a79737431aa1415d16b19ef9d8f9c8"&gt;renamed python-virtinst&lt;/a&gt; and the tool renamed to virt-install. By this point virt-manager was using the xeninst module for guest creation and needed to &lt;a href="https://git.fedorahosted.org/cgit/virt-manager.git/commit/?id=cd946bcfae2960c4769c5f12e235d1026a33328d"&gt;handle the rename&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;So now python-virtinst was its own standalone package, providing virt-install and a python library named virtinst. Over the next couple years the repo accumulated a few more tools: &lt;a href="https://git.fedorahosted.org/cgit/python-virtinst.git/commit/?id=bfa6c18f94fdb9d30c30df494e4b338745e79f5e"&gt;virt-clone in May 2007&lt;/a&gt;, &lt;a href="https://git.fedorahosted.org/cgit/python-virtinst.git/commit/?id=c4d45ff7960bd84050bb382d597dc3cfdf3d3882"&gt;virt-image in June 2007&lt;/a&gt;, and &lt;a href="https://git.fedorahosted.org/cgit/python-virtinst.git/commit/?id=a0401fe359af0220ea3e609861042ad9f000d7d5"&gt;virt-convert (originally virt-unpack) in July 2008&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However over the next few years we had some growing pains with the virtinst module. It wasn't exactly a planned API, rather a collection of code that grew organically from a quick hack of a script. It never received too much thought for future compatibility. The fact that it ended up as a public API was more historic accident than anything. Once we accumulated external users (&lt;a href="https://github.com/cobbler/cobbler/commit/dd569b1834e9611b8390d334e2016b0659253e72"&gt;cobbler in March 2007&lt;/a&gt; and &lt;a href="https://git.fedorahosted.org/cgit/koji/commit/?id=64cc01be898547d150f0200111ff0e57176ecdd7"&gt;koji in July 2010&lt;/a&gt;) we were stuck with the API in the name of back compatibility.&lt;/p&gt;
&lt;p&gt;Then there was the general frustration of doing virt-manager development when it evolved in lockstep with virtinst: running upstream virt-manager always required running up to date python-virtinst, which was a barrier to upstream contribution.&lt;/p&gt;
&lt;p&gt;So in February 2012 I layed out some reasons for &lt;a href="http://www.redhat.com/archives/virt-tools-list/2012-February/msg00040.html"&gt;dropping virtinst as a public API and merging the code into virt-manager.git&lt;/a&gt;, though it didn't fully happen until &lt;a href="https://www.redhat.com/archives/virt-tools-list/2013-April/msg00026.html"&gt;april 2013 during the virt-manager 0.10.0 cycle&lt;/a&gt;. In the intervening year, I sent patches to koan and koji to move off virtinst to calling the needed virt-* tool directly.&lt;/p&gt;
&lt;p&gt;So nowadays virtinst, virt-install, etc. all live with virt-manager.git. If you're looking for a library that helps handle libvirt XML or create libvirt VMs, check out &lt;a href="http://libvirt.org/git/?p=libvirt-designer.git;a=summary"&gt;libvirt-designer&lt;/a&gt; and &lt;a href="http://libvirt.org/git/?p=libvirt-glib.git;a=summary"&gt;libvirt-gobject/libvirt-gconfig&lt;/a&gt;.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Github doesn't support pull-request notifications to mailing lists</title><link href="https://crobinso.github.io/2014/04/github-doesnt-support-pull-request.html" rel="alternate"></link><published>2014-04-29T10:00:00-04:00</published><updated>2014-04-29T10:00:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-04-29:/2014/04/github-doesnt-support-pull-request.html</id><summary type="html">&lt;p&gt;Recently I played around with github a bit, with the intention of finding a useful setup for hosting &lt;a href="https://fedorahosted.org/python-bugzilla/"&gt;python-bugzilla&lt;/a&gt; (and possibly virt-manager). However I want to preserve the traditional open source mailing list driven development model.&lt;/p&gt;
&lt;p&gt;github's whole development model is built around pull requests. Personally I kinda like the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I played around with github a bit, with the intention of finding a useful setup for hosting &lt;a href="https://fedorahosted.org/python-bugzilla/"&gt;python-bugzilla&lt;/a&gt; (and possibly virt-manager). However I want to preserve the traditional open source mailing list driven development model.&lt;/p&gt;
&lt;p&gt;github's whole development model is built around pull requests. Personally I kinda like the setup, but for a pre-existing project built around patches on a mailing list it's quite a different workflow.&lt;/p&gt;
&lt;p&gt;github doesn't allow disabling the pull-request option. This is understandable since it's pretty central to their entire model. However my main sticking point is that &lt;strong&gt;github doesn't provide a straightforward way to send pull request notifications to a mailing list&lt;/strong&gt;. I don't want everyone on a mailing list to have to opt in to watching the repo on github to be notified of pull requests. I want non-github users to be able to contribute to pull request discussions on a mailing list. I want pull requests on the project mailing list since it's already a part of my workflow. I don't want my project to be one of those that &lt;a href="https://github.com/torvalds/linux"&gt;accumulates&lt;/a&gt; &lt;a href="https://github.com/libguestfs/libguestfs"&gt;ignored&lt;/a&gt; &lt;a href="https://github.com/qemu/qemu"&gt;pull-requests&lt;/a&gt; because it isn't part of the project workflow and no one is watching the output.&lt;/p&gt;
&lt;p&gt;Googling about this was quite frustrating, it was difficult to find a clear answer. I eventually found an &lt;a href="https://github.com/github/github-services/pull/284"&gt;abandoned pull request to github-services&lt;/a&gt; that made everything clear. But not before I tried quite a few things. Here's what I tried:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Opening a github account using the mailing list address, 'watch' the repository. It works, but yeah, not too safe since anyone can just trigger a 'forgot password' reset email.&lt;/li&gt;
&lt;li&gt;Put the repo in an 'organization', add the mailing list as a secondary address to your account, have all &lt;a href="https://gist.github.com/BPScott/1366790"&gt;notifications for the organization&lt;/a&gt; go to the mailing list. But even secondary accounts work for the password reset, so that's out.&lt;/li&gt;
&lt;li&gt;'email' webhook/service: At your github repo, go to settings-&gt;webhooks &amp;amp; services-&gt;configure services-&gt;email. Hey, this looks promising. The problem is it's quite limited in scope, only supporting email notifications for repo pushes and when  a public repo is added.&lt;/li&gt;
&lt;li&gt;The actual webhook configuration is quite elaborate and allows notifying of pull-requests and everything else you would want to know, but that requires running an actual web service somewhere. But I have no interest in maintaining a public service just to proxy some email.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's a &lt;a href="https://github.com/github/github-services"&gt;public repo for the bit of github&lt;/a&gt; that the 'email' webhook lives under. I stuck &lt;a href="https://github.com/github/github-services/issues/804#issuecomment-38390436"&gt;some thoughts on an open issue&lt;/a&gt; that more or less tracks the RFE to extend the email capabilities.&lt;/p&gt;
&lt;p&gt;Someone out there with some spare time and ruby-fu want to take a crack at this? I think many old school open source projects would be thankful for it :)&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-convert command line has been reworked</title><link href="https://crobinso.github.io/2014/04/virt-convert-command-line-has-been.html" rel="alternate"></link><published>2014-04-22T10:00:00-04:00</published><updated>2014-04-22T10:00:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-04-22:/2014/04/virt-convert-command-line-has-been.html</id><summary type="html">&lt;p&gt;One of the changes we made with &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; was a large reworking of the virt-convert command line interface.&lt;/p&gt;
&lt;p&gt;virt-convert started life as a tool for converting back and forth between different VM configuration formats. Originally it was just between vmx and virt-image(5), but it eventually grew ovf …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the changes we made with &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; was a large reworking of the virt-convert command line interface.&lt;/p&gt;
&lt;p&gt;virt-convert started life as a tool for converting back and forth between different VM configuration formats. Originally it was just between vmx and virt-image(5), but it eventually grew ovf input support. However, for the common usage of trying to convert a vmx/ovf appliance into a libvirt guest, this involved an inconvenient two step process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert to virt-image(5) with virt-convert&lt;/li&gt;
&lt;li&gt;Convert to a running libvirt guest with virt-image(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, since virt-image didn't really have any users, it's &lt;a href="http://blog.wikichoon.com/2014/04/deprecating-little-used-tool-virt-image1.html"&gt;planned for removal&lt;/a&gt;. So we took the opportunity to improve virt-convert in the process. Running virt-convert is now as simple as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virt-convert fedora18.ova&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virt-convert centos6.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And a we convert directly to libvirt XML and launch the guest. Standard libvirt options are allowed, like --connect for specifying the libvirt driver.&lt;/p&gt;
&lt;p&gt;The tool hasn't been heavily used and there's definitely still a lot of details we are missing, so if you hit any issues please &lt;a href="http://virt-manager.org/bugs/"&gt;file a bug report.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Long term it sounds like gnome-boxes may grow a similar feature as mentioned &lt;a href="http://zee-nix.blogspot.com/2014/03/boxes-312.html"&gt;over here&lt;/a&gt;, so maybe virt-convert isn't long for this world since there will likely be a command line interface for it as well)&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Deprecating little used tool virt-image(1)</title><link href="https://crobinso.github.io/2014/04/deprecating-little-used-tool-virt-image1.html" rel="alternate"></link><published>2014-04-15T10:00:00-04:00</published><updated>2014-04-15T10:00:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-04-15:/2014/04/deprecating-little-used-tool-virt-image1.html</id><summary type="html">&lt;p&gt;In the recent &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0 release&lt;/a&gt;, we've taken a step towards deprecating one of the command line tools we ship, &lt;a href="http://linux.die.net/man/1/virt-image"&gt;virt-image(1)&lt;/a&gt;. This shouldn't have any real end user effect because I'm pretty sure near zero people are using it.&lt;/p&gt;
&lt;p&gt;virt-image &lt;a href="https://www.redhat.com/archives/et-mgmt-tools/2007-June/msg00076.html"&gt;was created&lt;/a&gt; in June 2007 as an &lt;a href="http://linux.die.net/man/5/virt-image"&gt;XML …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the recent &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0 release&lt;/a&gt;, we've taken a step towards deprecating one of the command line tools we ship, &lt;a href="http://linux.die.net/man/1/virt-image"&gt;virt-image(1)&lt;/a&gt;. This shouldn't have any real end user effect because I'm pretty sure near zero people are using it.&lt;/p&gt;
&lt;p&gt;virt-image &lt;a href="https://www.redhat.com/archives/et-mgmt-tools/2007-June/msg00076.html"&gt;was created&lt;/a&gt; in June 2007 as an &lt;a href="http://linux.die.net/man/5/virt-image"&gt;XML schema&lt;/a&gt; and command line tool for distributing VM images as appliances. The format would describe the fundamental needs of a VM image, like how many disk devices it wants, but leave the individual configuration details up to the user. The virt-image(1) tool would take the XML as input and kick off a libvirt VM.&lt;/p&gt;
&lt;p&gt;While the idea was reasonable, the XML format would only be useful if people actually used it, which never happened. All desktop VM appliance usage nowadays is shipped with native VMWare config as .vmx files, or with .ovf configuration.&lt;/p&gt;
&lt;p&gt;In the past, &lt;a href="https://git.fedorahosted.org/cgit/appliance-tools.git/"&gt;appliance-tools&lt;/a&gt; generated virt-image XML, but that was dropped. Same with &lt;a href="http://boxgrinder.org/"&gt;boxgrinder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But most users of it in the past few years have been way of the (also little used) virt-convert tool that we ship with virt-manager (which I'll cover in a later post). Historically virt-convert would output virt-image XML by default. Well, that too was changed in 1.0: virt-convert generates direct libvirt XML now. This makes virt-convert more convenient, and left us with no good reason to keep virt-image around anymore.&lt;/p&gt;
&lt;p&gt;So the plan is to drop virt-image before the next major release of virt-manager. Likely sometime in the next 6 months.&lt;/p&gt;
&lt;p&gt;(edit 2014-09-08: virt-image was removed in &lt;a href="http://blog.wikichoon.com/2014/09/virt-manager-110-released.html"&gt;virt-manager-1.1.0&lt;/a&gt;)&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>pylint in Fedora 20 supports gobject introspection</title><link href="https://crobinso.github.io/2014/04/pylint-in-fedora-20-supports-gobject.html" rel="alternate"></link><published>2014-04-08T10:00:00-04:00</published><updated>2014-04-08T10:00:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-04-08:/2014/04/pylint-in-fedora-20-supports-gobject.html</id><summary type="html">&lt;p&gt;&lt;a href="https://wiki.gnome.org/GObjectIntrospection"&gt;GObject introspection&lt;/a&gt; is the magical plumbing that enables building multiple language bindings for a GObject-based library using not much more than API documentation. This is used by &lt;a href="https://wiki.gnome.org/PyGObject"&gt;PyGObject&lt;/a&gt; to give us python access to gtk3, gdk, glib, etc. Pretty sweet.&lt;/p&gt;
&lt;p&gt;Unfortunately the automagic nature of this confused &lt;a href="http://www.pylint.org/"&gt;pylint&lt;/a&gt;, claiming your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://wiki.gnome.org/GObjectIntrospection"&gt;GObject introspection&lt;/a&gt; is the magical plumbing that enables building multiple language bindings for a GObject-based library using not much more than API documentation. This is used by &lt;a href="https://wiki.gnome.org/PyGObject"&gt;PyGObject&lt;/a&gt; to give us python access to gtk3, gdk, glib, etc. Pretty sweet.&lt;/p&gt;
&lt;p&gt;Unfortunately the automagic nature of this confused &lt;a href="http://www.pylint.org/"&gt;pylint&lt;/a&gt;, claiming your 'from gi.repository import Gtk' import didn't exist, and losing many of its nice features when interacting with objects provided by introspection derived bindings.&lt;/p&gt;
&lt;p&gt;I love pylint and it's a critical part of my python development workflow. So last year I decided to do my part and submit a patch to add some &lt;a href="https://bitbucket.org/logilab/pylint-brain/issue/1/patch-pylint-brain-plugin-for-gobject"&gt;gobject introspection knowledge to pylint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It works by actually importing the module (like 'Gtk' above), inspecting all its classes and functions, and building stub code that pylint can analyze. It's not perfect, but it will catch things like misspelled method names. (Apparently newer python-astroid has some infrastructure to &lt;a href="https://bitbucket.org/logilab/pylint-brain/issue/4/py2gi-rewrite-using-the-living-object"&gt;inspect living objects&lt;/a&gt;, so likely the plugin will use that one day).&lt;/p&gt;
&lt;p&gt;This support was released in python-astroid-1.0.1, which hit Fedora 20 at the beginning of March. Unfortunately a &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1079643"&gt;a bug&lt;/a&gt; was causing a bunch of false positives with gobject-introspection, but that should be fixed with python-astroid-1.0.1-3 heading to F20.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Spice USB redirection in virt-manager</title><link href="https://crobinso.github.io/2014/04/spice-usb-redirection-in-virt-manager.html" rel="alternate"></link><published>2014-04-01T10:00:00-04:00</published><updated>2014-04-01T10:00:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-04-01:/2014/04/spice-usb-redirection-in-virt-manager.html</id><summary type="html">&lt;p&gt;A new feature we added in &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; is out of the box support for Spice USB redirection.&lt;/p&gt;
&lt;p&gt;When connected to a VM's graphical display, any USB device plugged in to your physical host will be automatically redirected to the VM. This is great for easily sharing a usb …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A new feature we added in &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; is out of the box support for Spice USB redirection.&lt;/p&gt;
&lt;p&gt;When connected to a VM's graphical display, any USB device plugged in to your physical host will be automatically redirected to the VM. This is great for easily sharing a usb drive with your VM. Existing devices can also be manually attached via the VM window menu option 'Virtual Machine-&gt;Redirect USB Device'&lt;/p&gt;
&lt;p&gt;The great thing about Spice USB redirection is that it doesn't require configuring the spice agent or any special drivers inside the VM, so for example it will 'just work' for your existing windows VMs. And since the streaming is done via the spice display widget, you can easily share a local USB device with a VM on a remote host.&lt;/p&gt;
&lt;p&gt;This feature is only properly enabled for KVM VMs that are created with virt-manager 1.0 or later. Configuring an existing VM requires 3 changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the graphics type to Spice&lt;/li&gt;
&lt;li&gt;Set the USB controller model to USB2&lt;/li&gt;
&lt;li&gt;Add a 'Redirection USB' device to the VM. Add multiple redirection devices to allow redirecting multiple host USB devices simultaneously.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All those bits should be fairly straight forward to do with the UI in virt-manager 1.0.&lt;/p&gt;
&lt;p&gt;For more details, like how to do this using libvirt XML or the qemu command line, check the documentation over here:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://people.freedesktop.org/~teuf/spice-doc/html/"&gt;http://people.freedesktop.org/~teuf/spice-doc/html/&lt;/a&gt;&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager: Improved CPU model default</title><link href="https://crobinso.github.io/2014/03/virt-manager-improved-cpu-model-default.html" rel="alternate"></link><published>2014-03-25T14:18:00-04:00</published><updated>2014-03-25T14:18:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-03-25:/2014/03/virt-manager-improved-cpu-model-default.html</id><summary type="html">&lt;p&gt;In &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; we improved many of the defaults we set when creating a new virtual machine. One of the major changes was to how we choose the &lt;a href="http://wiki.qemu.org/Features/CPUModels"&gt;CPU model&lt;/a&gt; that's exposed to the VM OS.&lt;/p&gt;
&lt;p&gt;CPU model here means something like 'Pentium 3' or 'Opteron 4' and all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; we improved many of the defaults we set when creating a new virtual machine. One of the major changes was to how we choose the &lt;a href="http://wiki.qemu.org/Features/CPUModels"&gt;CPU model&lt;/a&gt; that's exposed to the VM OS.&lt;/p&gt;
&lt;p&gt;CPU model here means something like 'Pentium 3' or 'Opteron 4' and all the CPU flags that go along with that. For KVM, every CPU flag that we expose to the VM has to be something provided by the host CPU, so we can't just unconditionally tell the VM to use the latest and greatest features. The newer the CPU that's exposed to the guest, the more features the guest kernel and userspace can use, which improves performance.&lt;/p&gt;
&lt;p&gt;There's a few trade offs however: if &lt;a href="http://www.linux-kvm.org/page/Migration"&gt;live migrating&lt;/a&gt; your VM, the destination host CPU needs to be able to represent all the features that have been exposed to the VM. So if your VM is using 'Opteron G5', but your destination host is only an 'Opteron G4', the migration will fail. And changing the VM CPU after OS installation can cause Windows VMs to require reactivation, which can be problematic. So in some instances you are stuck with the CPU model the VM was installed with.&lt;/p&gt;
&lt;p&gt;Prior to virt-manager 1.0, new VMs received the hypervisor default CPU model. For qemu/kvm, that's qemu64, a made up CPU with very few feature flags. This leads to less suboptimal guest OS performance but maximum migration compatibility.&lt;/p&gt;
&lt;p&gt;But the reality is that cross host migration is not really a major focus of virt-manager. Migration is all about preserving uptime of a server VM, but most virt-manager users are managing VMs for personal use. It's a bigger win to maximize out of the box performance.&lt;/p&gt;
&lt;p&gt;For virt-manager 1.0, we wanted new VMs to have an identical copy of the host CPU. There's two ways to do that &lt;a href="http://libvirt.org/formatdomain.html#elementsCPU"&gt;via libvirt&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;mode=host-passthrough&lt;/strong&gt;: This maps to the 'qemu -cpu host' command line. However, this option is explicit not recommended for libvirt usage. libvirt wants to fully specify a VM's hardware configuration, to insulate the VM from any hardware layout changes when qemu is updated on the host. '-cpu host' defers to qemu's detection logic, which violates that principle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mode=host-model&lt;/strong&gt;: This is libvirt's attempted reimplementation of '-cpu host', and is the recommended solution in this case. However the current implementation has &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1055002"&gt;quite a few problems&lt;/a&gt;. The issues won't affect most users, and they are being worked on, but for now host-model isn't safe to use as a general default.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So for virt-manager 1.0, we compromised to using the nearest complete CPU model of the host CPU. This requires a bit of explanation. There are multiple CPUs on the market that are labelled as 'core2duo'. They all share a fundamental core of features that define what 'core2duo' means. But some models also have [additional]{.underline} features. virt-manager 1.0 will ignore those extra bits and just pass 'core2duo' to your VM. This is the best we can do for performance at the moment without hitting the host-model issues mentioned above.&lt;/p&gt;
&lt;p&gt;However this default is configurable: if you want to return to the old method that maximizes migration compatibility, or you want to try out host-model, you can change the default for new VMs in Edit-&gt;Preferences:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-zLAswbzm8KI/UyW6c4ueGhI/AAAAAAAAAC0/CUuJ2YiO_C0/s1600/Screenshot+from+2014-03-16+10:47:50.png"&gt;&lt;img alt="" height="299" src="http://2.bp.blogspot.com/-zLAswbzm8KI/UyW6c4ueGhI/AAAAAAAAAC0/CUuJ2YiO_C0/s1600/Screenshot+from+2014-03-16+10:47:50.png" width="320"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-manager 1.0.1 release</title><link href="https://crobinso.github.io/2014/03/virt-manager-101-release.html" rel="alternate"></link><published>2014-03-22T18:50:00-04:00</published><updated>2014-03-22T18:50:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-03-22:/2014/03/virt-manager-101-release.html</id><summary type="html">&lt;p&gt;I've just released virt-manager 1.0.1. This was mostly a bug fix release to gather up the sizeable number of bug fixes that accumulated since &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0.0&lt;/a&gt; was released last month.&lt;/p&gt;
&lt;p&gt;Though there were a few mini features added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;virt-install/virt-xml: New --memorybacking option (Chen Hanxiao)&lt;/li&gt;
&lt;li&gt;virt-install …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I've just released virt-manager 1.0.1. This was mostly a bug fix release to gather up the sizeable number of bug fixes that accumulated since &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0.0&lt;/a&gt; was released last month.&lt;/p&gt;
&lt;p&gt;Though there were a few mini features added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;virt-install/virt-xml: New --memorybacking option (Chen Hanxiao)&lt;/li&gt;
&lt;li&gt;virt-install/virt-xml: New --memtune option (Chen Hanxiao)&lt;/li&gt;
&lt;li&gt;virt-manager: UI for LXC &lt;idmap&gt; (Chen Hanxiao)&lt;/idmap&gt;&lt;/li&gt;
&lt;li&gt;virt-manager: gsettings key to disable keygrab (Kjö Hansi Glaz)&lt;/li&gt;
&lt;li&gt;virt-manager: Show domain state reason in the UI (Giuseppe Scrivano)&lt;/li&gt;
&lt;li&gt;Support for many more device live update operations, like changing the network source for a running VM, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Builds inprogress for F20 and rawhide&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Snapshot support in virt-manager</title><link href="https://crobinso.github.io/2014/03/snapshot-support-in-virt-manager.html" rel="alternate"></link><published>2014-03-17T14:05:00-04:00</published><updated>2014-03-17T14:05:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-03-17:/2014/03/snapshot-support-in-virt-manager.html</id><summary type="html">&lt;p&gt;The biggest feature we added in &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; is VM snapshot support. Users have been asking us to expose this in the UI for quite a long time. In this post I'll walk you through the new UI.&lt;/p&gt;
&lt;p&gt;Let's start with some use cases for VM snapshots:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I want …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;The biggest feature we added in &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0&lt;/a&gt; is VM snapshot support. Users have been asking us to expose this in the UI for quite a long time. In this post I'll walk you through the new UI.&lt;/p&gt;
&lt;p&gt;Let's start with some use cases for VM snapshots:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I want to test some changes to my VM, and either throw them away, or use them permanently.&lt;/li&gt;
&lt;li&gt;I want to have a single Fedora 20 VM, but multiple snapshots with mutually exclusive OS changes in each. One snapshot might have F20 libvirt installed, but another snapshot will have libvirt.git installed. I want to switch between them for development, bug triage, etc.&lt;/li&gt;
&lt;li&gt;I encountered a bug in the VM. I want to save the running state of the VM incase developers want further debugging information, but I also want to restart the VM and continue to use it in the meantime.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The libvirt APIs support two different types of snapshots with qemu/kvm.&lt;/p&gt;
&lt;h4&gt;Internal snapshots&lt;/h4&gt;
&lt;p&gt;Internal snapshots are the snapshots that QEMU has supported for a long time. Libvirt refers to them as 'internal' because all the data is stored as part of the qcow2 disk image: if you have a VM with a single qcow2 disk image and take 10 snapshots, you still have only one file to manage. This is the default snapshot mode if using the 'virsh snapshot-*' commands.&lt;/p&gt;
&lt;p&gt;These snapshots can be combine disk and VM memory state for 'checkpointing', so you can jump back and forth between a saved running VM state. A snapshot of an offline VM can also be performed, and only the disk contents will be saved.&lt;/p&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only works with qcow2 disk images. Since virt-manager has historically used raw images, pre-existing VMs may not be able to work with this type.&lt;/li&gt;
&lt;li&gt;They are non-live, meaning the VM is paused while all the state is saved. For end users this likely isn't a problem, but if you are managing a public server, minimizing downtime is essential.&lt;/li&gt;
&lt;li&gt;Historically they were quite slow, but this has improved quite a bit with QEMU 1.6+&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;External snapshots&lt;/h4&gt;
&lt;p&gt;External snapshots are about safely creating &lt;a href="http://wiki.qemu.org/Documentation/CreateSnapshot"&gt;copy-on-write overlay files&lt;/a&gt; for a running VM's disk images. QEMU has supported copy-on-write overlay files for a long time, but the ability to create them for a running VM is only a couple years old. They are called 'external' because every snapshot creates a new overlay file.&lt;/p&gt;
&lt;p&gt;While the overlay files have to be qcow2, these snapshots will work with any base disk image. They can also be performed with very little VM downtime, at least under a second. The external nature also allows different use cases like live backup: create a snapshot, back up the original backing image, when backup completes, merge the overlay file changes back into the backing image.&lt;/p&gt;
&lt;p&gt;However that's mostly where the benefits end. Compared to internal snapshots, which are an end to end solution with all the complexity handled in QEMU, external snapshots are just a building block for handling the use cases I described above... and the many of the pieces haven't been filled in yet. Libvirt still needs &lt;a href="http://wiki.libvirt.org/page/I_created_an_external_snapshot,_but_libvirt_won%27t_let_me_delete_or_revert_to_it"&gt;a lot of work&lt;/a&gt; to reach feature parity with what internal snapshots already provide. This is understandable, as the main driver for external snapshot support was for features like live backup that internal snapshots weren't suited for. Once that point was reached, there hasn't been much of a good reason to do the difficult work of filling in the remaining support when internal snapshots already fit the bill.&lt;/p&gt;
&lt;h4&gt;virt-manager support&lt;/h4&gt;
&lt;p&gt;Understandably we decided to go with internal snapshots in virt-manager's UI. To facilitate this, we've changed the default disk image for new qemu/kvm VMs to &lt;strong&gt;qcow2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The snapshot UI is reachable via the VM details toolbar and menu:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-NHIb6TbX5MU/UyXr45_n3mI/AAAAAAAAADE/AO3vok9OpTM/s1600/Screenshot+from+2014-03-16+14:21:49.png"&gt;&lt;img alt="" height="158" src="http://4.bp.blogspot.com/-NHIb6TbX5MU/UyXr45_n3mI/AAAAAAAAADE/AO3vok9OpTM/s1600/Screenshot+from+2014-03-16+14:21:49.png" width="320"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That button will be disabled with an informative tool tip if snapshots aren't supported, such as if the the disk image isn't qcow2, or using a libvirt driver like xen which doesn't have snapshot support wired up.&lt;/p&gt;
&lt;p&gt;Here's what the main screen looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-5vmjChe5sHQ/UyXv-N5iDmI/AAAAAAAAADQ/mWa1zIPIFag/s1600/Screenshot+from+2014-03-16+14:39:18.png"&gt;&lt;img alt="" height="627" src="http://2.bp.blogspot.com/-5vmjChe5sHQ/UyXv-N5iDmI/AAAAAAAAADQ/mWa1zIPIFag/s1600/Screenshot+from+2014-03-16+14:39:18.png" width="640"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's pretty straight forward. The column on the left lists all the snapshots. The 'VM State' means &lt;em&gt;the state the VM was in when the snapshot was taken&lt;/em&gt;. So running/reverting to a 'Running' snapshot means the VM will end up in a running state, a 'Shutoff' snapshot will end up with the VM shutoff, etc.&lt;/p&gt;
&lt;p&gt;The check mark indicates the &lt;em&gt;last applied snapshot&lt;/em&gt;, which could be the most recently created snapshot or the most recently run/reverted snapshot. The VM disk contents are basically 'the snapshot contents' + 'whatever changes I've made since then'. It's just an indicator of where you are.&lt;/p&gt;
&lt;p&gt;Internal snapshots are all independent of one another. You can take 5 successive snapshots, delete 2-4, and snapshot 1 and 5 will still be completely independent. Any notion of a snapshot hierarchy is really just metadata, and we decided not to expose it in the UI. That may &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1065077"&gt;change in the future&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Run/revert to a snapshot with the play button along the bottom. Create a new snapshot by hitting the + button. The wizard is pretty simple:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-h45EjtteJJk/UyXx3OybSrI/AAAAAAAAADc/QNVyzJAADJo/s1600/Screenshot+from+2014-03-16+14:47:26.png"&gt;&lt;img alt="" height="400" src="http://1.bp.blogspot.com/-h45EjtteJJk/UyXx3OybSrI/AAAAAAAAADc/QNVyzJAADJo/s1600/Screenshot+from+2014-03-16+14:47:26.png" width="359"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That's about it. Give it a whirl in virt-manager 1.0 and &lt;a href="http://virt-manager.org/bugs/"&gt;file a bug&lt;/a&gt; if you hit any issues.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>Extending the virt-xml command line</title><link href="https://crobinso.github.io/2014/03/extending-virt-xml-command-line.html" rel="alternate"></link><published>2014-03-10T18:03:00-04:00</published><updated>2014-03-10T18:03:00-04:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-03-10:/2014/03/extending-virt-xml-command-line.html</id><summary type="html">&lt;p&gt;Edit May 2019: This tutorial is out of date. A modern version is on the virt-manager github wiki: &lt;a href="https://github.com/virt-manager/virt-manager/wiki/Extending-the-command-line"&gt;https://github.com/virt-manager/virt-manager/wiki/Extending-the-command-line&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As &lt;a href="http://blog.wikichoon.com/2014/03/virt-xml-edit-libvirt-xml-from-command.html"&gt;previously explained&lt;/a&gt;, virt-manager 1.0.0 shipped with a tool called virt-xml, which enables editing libvirt XML from the command line in one shot …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Edit May 2019: This tutorial is out of date. A modern version is on the virt-manager github wiki: &lt;a href="https://github.com/virt-manager/virt-manager/wiki/Extending-the-command-line"&gt;https://github.com/virt-manager/virt-manager/wiki/Extending-the-command-line&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As &lt;a href="http://blog.wikichoon.com/2014/03/virt-xml-edit-libvirt-xml-from-command.html"&gt;previously explained&lt;/a&gt;, virt-manager 1.0.0 shipped with a tool called virt-xml, which enables editing libvirt XML from the command line in one shot. This post will walk through an example of patching virt-xml to support a new libvirt XML value.&lt;/p&gt;
&lt;p&gt;A bit of background: libvirt VM configuration is in XML format. It &lt;a href="http://libvirt.org/formatdomain.html"&gt;has quite an extensive XML schema&lt;/a&gt;. For QEMU/KVM guests, most of the XML attributes map to qemu command line values. QEMU is always adding new emulated hardware and new features, which in turn require the XML schema to be extended. Example: this &lt;a href="http://libvirt.org/git/?p=libvirt.git;a=commit;h=08d07e5fd8a4c072bf040b3949bbd969f98d1081"&gt;recent libvirt change&lt;/a&gt; to allow turning off Spice drag + drop support with a &lt;code&gt;&amp;lt;filetransfer enable='no'/\&amp;gt;&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;For this example, we are going to expose a different property: defaultMode, also part of the graphics device. defaultMode can be used to tell qemu to open all spice channels in secure TLS mode. But for the purpose of this example, what defaultMode actually does and how it works isn't important. For virt-xml, the only important bit is getting the value for the command line, writing it correctly as XML, and unit testing the XML generation.&lt;/p&gt;
&lt;p&gt;You can see the completed virt-xml git commit &lt;a href="https://github.com/virt-manager/virt-manager/commit/b4e4f683761c55259bd5ed4b3c5549568d6147bb"&gt;over here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 0: Run the test suite&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The virt-manager test suite aims to always 100% pass, but depending on your host libvirt version things can occasionally be broken. Run 'python setup.py test' and note if any tests fail. The important bit here is that after we make all the following changes, the test suite shouldn't regress at all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1: XML generation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/virtinst/devicegraphics.py b/virtinst/devicegraphics.py&lt;/span&gt;
&lt;span class="gh"&gt;index 37f268a..a87b71c 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/virtinst/devicegraphics.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/virtinst/devicegraphics.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -204,6 +204,7 @@ class VirtualGraphics(VirtualDevice):&lt;/span&gt;
   passwdValidTo = XMLProperty(&amp;quot;./@passwdValidTo&amp;quot;)
   socket = XMLProperty(&amp;quot;./@socket&amp;quot;)
   connected = XMLProperty(&amp;quot;./@connected&amp;quot;)
&lt;span class="gi"&gt;+  defaultMode = XMLProperty(&amp;quot;./@defaultMode&amp;quot;)&lt;/span&gt;

   listens = XMLChildProperty(_GraphicsListen)
   def remove_listen(self, obj):
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Starting with &lt;a href="https://github.com/virt-manager/virt-manager"&gt;virt-manager git&lt;/a&gt;, first we extend the internal API to map a python class property to its associated XML value.&lt;/p&gt;
&lt;p&gt;The virtinst/ directory contains the internal XML building API used by all the tools shipped with virt-manager. There's generally a single file and class per XML object, examples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;devicegraphics.py: &lt;code&gt;&amp;lt;graphics\&amp;gt;&lt;/code&gt; device&lt;/li&gt;
&lt;li&gt;cpu.py: &lt;code&gt;&amp;lt;cpu\&amp;gt;&lt;/code&gt; block&lt;/li&gt;
&lt;li&gt;osxml.py: &lt;code&gt;&amp;lt;os\&amp;gt;&lt;/code&gt; block&lt;/li&gt;
&lt;li&gt;And so on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you aren't sure what file or class you need to alter, try grepping for a property you know that virt-install already supports. So, for example, using &lt;a href="http://blog.wikichoon.com/2014/02/virt-install-command-line-introspection.html"&gt;virt-install --graphics=?&lt;/a&gt; I see that there's a property named passwdValidTo. Doing 'git grep passwdValidTo' will point to virtinst/devicegraphics.py&lt;/p&gt;
&lt;p&gt;'XMLProperty' is some custom glue that maps a python class property to an XML value, for both reading and writing. The value passed to XMLProperty is an XML xpath. If you don't know how xpaths work, google around, or try to find an existing example in the virtinst code.&lt;/p&gt;
&lt;p&gt;Notice that this doesn't do much else, like validate that the value passed to defaultMode is actually valid. The general rule is to leave this up to libvirt to complain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Command line handling&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/virtinst/cli.py b/virtinst/cli.py&lt;/span&gt;
&lt;span class="gh"&gt;index 826663a..41d6a8c 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/virtinst/cli.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/virtinst/cli.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1810,6 +1810,7 @@ class ParserGraphics(VirtCLIParser):&lt;/span&gt;
     self.set_param(&amp;quot;passwd&amp;quot;, &amp;quot;password&amp;quot;)
     self.set_param(&amp;quot;passwdValidTo&amp;quot;, &amp;quot;passwordvalidto&amp;quot;)
     self.set_param(&amp;quot;connected&amp;quot;, &amp;quot;connected&amp;quot;)
&lt;span class="gi"&gt;+    self.set_param(&amp;quot;defaultMode&amp;quot;, &amp;quot;defaultMode&amp;quot;)&lt;/span&gt;

   def _parse(self, opts, inst):
     if opts.fullopts == &amp;quot;none&amp;quot;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next step is to set up command line handling. In this case we are adding a sub option to the --graphics command. Open up virtinst/cli.py and search for '--graphics', you'll find a comment with a ParserGraphics class defined after it. That's where we plug in new sub options.&lt;/p&gt;
&lt;p&gt;The 'self.set_param' registers the sub option: first argument is the name on the cli, second argument is the property name we defined above. In this case they are the same.&lt;/p&gt;
&lt;p&gt;Some options do extra validation or need to do special handling. If you need extra functionality, look at examples that pass setter_cb to set_param.&lt;/p&gt;
&lt;p&gt;After this bit is applied, you'll see defaultMode appear in the --graphics=? output, and everything will work as expected. But we need to add a unit test to validate the XML generation.&lt;/p&gt;
&lt;p&gt;An easy way to test that this is working is with a command line like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./virt-install --connect test:///default --name foo --ram 64
              --nodisks --boot network --print-xml
              --graphics spice,defaultMode=secure
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That will use libvirt's 'test' driver, which is made for unit testing, and doesn't affect the host at all. The --print-xml command will output the new XML. Verify that your new command line option works as expected before continuing. See the &lt;a href="https://github.com/virt-manager/virt-manager/blob/master/HACKING"&gt;HACKING&lt;/a&gt; file for additional tips for using the test driver.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Unit test XML generation&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/tests/xmlparse.py b/tests/xmlparse.py&lt;/span&gt;
&lt;span class="gh"&gt;index a2448d2..397da45 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/tests/xmlparse.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/tests/xmlparse.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -559,6 +559,7 @@ class XMLParseTest(unittest.TestCase):&lt;/span&gt;
     check(&amp;quot;channel_cursor_mode&amp;quot;, &amp;quot;any&amp;quot;, &amp;quot;any&amp;quot;)
     check(&amp;quot;channel_playback_mode&amp;quot;, &amp;quot;any&amp;quot;, &amp;quot;insecure&amp;quot;)
     check(&amp;quot;passwdValidTo&amp;quot;, &amp;quot;2010-04-09T15:51:00&amp;quot;, &amp;quot;2011-01-07T19:08:00&amp;quot;)
&lt;span class="gi"&gt;+    check(&amp;quot;defaultMode&amp;quot;, None, &amp;quot;secure&amp;quot;)&lt;/span&gt;

     self._alter_compare(guest.get_xml_config(), outfile)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;tests/xmlparse.py tests reading and writing, so it will test the change we made in virtinst/devicegraphics.py. Before you make any tests/, run 'python setup.py test --testfile xmlparse.py', you should see a new error: this is because xmlparse.py will emit a test failure if a new XML property in virtinst/ that isn't explicitly tested!&lt;/p&gt;
&lt;p&gt;Similar to how you found what virtinst/ file to edit by grepping for a known graphics property like passwdValidTo, do the same in xmlparse.py to find the pre-existing graphics test function. The check() invocation is a small wrapper for setting and reading a value: the first argument is the python property name we are poking, the second argument is what the initial value should be, and the final argument is the new value we are setting.&lt;/p&gt;
&lt;p&gt;The initial XML comes from tests/xmlparse-xml/*, and is initialized at the start of the function. But in our case, we don't need to manually alter that. So make the change, and rerun 'python setup.py test --testfile xmlparse.py' and...&lt;/p&gt;
&lt;p&gt;Things broke! That's because the generated XML output changed, and contains our new defaultMode value. So we need to update the known-good XML files we compare against. The easiest way to do that is to run 'python setup.py test --testfile xmlparse.py --regenerate-output'. Run 'git diff' afterwards to ensure that only the graphics file was changed.&lt;/p&gt;
&lt;p&gt;Finally, run 'python setup.py test' and ensure the rest of the test suite doesn't regress compared to the initial run you did in Step 0.&lt;/p&gt;
&lt;p&gt;For cases where you added non-trivial command line handling, take a look at tests/clitest.py, where we run a battery of command line parsing tests. You likely want to extend this to verify your command line works as expected.&lt;/p&gt;
&lt;p&gt;Also, if you want to add an entirely new command line option that maps to an XML block, &lt;a href="https://github.com/virt-manager/virt-manager/commit/94744bce20ec88a7a83c5e7af23dac5d5b0fae10"&gt;this commit adding the --memtune option&lt;/a&gt; is a good reference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4) Documentation?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For each new option sub property, the general rule is we don't need to explicitly list it in the man page or virt-install/virt-xml --help output. The idea is that command line introspection and libvirt XML documentation should be sufficient. However, if your command line option has some special behavior, or is particularly important, consider extending man/virt-install.pod.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5) Submit the patch!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So your patch is done! git commit -a &amp;amp;&amp;amp; git send-email -1 --to virt-tools-list@redhat.com or simply drop it in a &lt;a href="http://virt-manager.org/bugs/"&gt;bug report&lt;/a&gt;. If you have any questions or need any assitance, &lt;a href="http://virt-manager.org/communicate/"&gt;drop us a line&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(update 2015-09-04: Point git links to github)&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry><entry><title>virt-xml: Edit libvirt XML from the command line</title><link href="https://crobinso.github.io/2014/03/virt-xml-edit-libvirt-xml-from-command.html" rel="alternate"></link><published>2014-03-04T09:00:00-05:00</published><updated>2014-03-04T09:00:00-05:00</updated><author><name>Cole Robinson</name></author><id>tag:crobinso.github.io,2014-03-04:/2014/03/virt-xml-edit-libvirt-xml-from-command.html</id><summary type="html">&lt;p&gt;We shipped a new tool with &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0.0&lt;/a&gt; called &lt;a href="https://www.redhat.com/archives/virt-tools-list/2014-January/msg00179.html"&gt;virt-xml&lt;/a&gt;. virt-xml uses virt-install's command line options to allow building and editing libvirt domain XML. A few basic examples:&lt;/p&gt;
&lt;p&gt;Change the &lt;code&gt;&amp;lt;description\&amp;gt;&lt;/code&gt; of domain 'example':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# virt-xml example --edit --metadata description=&amp;quot;my new description&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enable the boot device menu for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We shipped a new tool with &lt;a href="http://blog.wikichoon.com/2014/02/virt-manager-100-released.html"&gt;virt-manager 1.0.0&lt;/a&gt; called &lt;a href="https://www.redhat.com/archives/virt-tools-list/2014-January/msg00179.html"&gt;virt-xml&lt;/a&gt;. virt-xml uses virt-install's command line options to allow building and editing libvirt domain XML. A few basic examples:&lt;/p&gt;
&lt;p&gt;Change the &lt;code&gt;&amp;lt;description\&amp;gt;&lt;/code&gt; of domain 'example':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# virt-xml example --edit --metadata description=&amp;quot;my new description&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enable the boot device menu for domain 'example':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# virt-xml example --edit --boot bootmenu=on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hotplug host USB device 001.003 to running domain 'fedora19':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# virt-xml f19 --add-device --host-device 001.003 --update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://git.fedorahosted.org/cgit/virt-manager.git/tree/man/virt-xml.pod"&gt;virt-xml man page&lt;/a&gt; also has a comprehensive set of examples.&lt;/p&gt;
&lt;p&gt;While I doubt anyone would call it sexy, virt-xml fills a real need in the libvirt ecosystem. Prior to virt-xml, a question like 'how do I change the cache mode for my VM disk' had two possible answers:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) Use 'virsh edit'&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;'virsh edit' drops you into $EDITOR and allows you to edit the XML manually. Now ignoring the fact that editing XML by hand is a pain, 'virsh edit' requires the user to know the exact XML attribute or property name, and where to put it. And if its in the wrong place or mis-named, in most cases libvirt will happily ignore it with no feedback (this is actually useful at the API level but not very friendly for direct user interaction).&lt;/p&gt;
&lt;p&gt;But more than that, have you ever seen what happens when you drop a less than savvy user into vim for the first time? It doesn't end well :) And this happens more than you might expect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) Use virt-manager&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The more newbie friendly option for sure, the UI is intuitive enough that people can usually find the XML bit they want to twiddle... provided it actually exists in virt-manager.&lt;/p&gt;
&lt;p&gt;And that's the problem: over time these types of requests put pressure on virt-manager to expose many kind-of-obscure-but-not-so-obscure-that-virsh-edit-is-an-acceptable-answer XML properties in the UI. It was unclear where to draw the line on what should be in the UI and what shouldn't, and we ended up with various UI bits that very few people were actually interacting with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter virt-xml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So here's virt-xml, that allows us to easily make these types of XML changes with a single command. This takes the pressure off virt-manager, and provides a friendly middle ground between the GUI and 'virsh edit'. It also greatly simplifies documentation and wiki pages (like fedora test day test cases).&lt;/p&gt;
&lt;p&gt;The CLI API surface is huge compared to virt-manager's UI. There's no reason that virt-xml can't expand to support every XML property exposed by libvirt. And we've worked on making it trivially easy to to extend the tool to handle new XML options: in many cases, it's only &lt;a href="http://blog.wikichoon.com/2014/03/extending-virt-xml-command-line.html"&gt;&lt;strong&gt;3 lines of code&lt;/strong&gt;&lt;/a&gt; to add a new --disk/--network/... sub option, including unit testing, &lt;a href="http://blog.wikichoon.com/2014/02/virt-install-command-line-introspection.html"&gt;command line introspection&lt;/a&gt;, and virt-install support.&lt;/p&gt;</content><category term="fedora"></category><category term="virt"></category></entry></feed>